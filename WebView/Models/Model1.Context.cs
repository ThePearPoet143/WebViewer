//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebView.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ArchivedSlideRun> ArchivedSlideRuns { get; set; }
        public virtual DbSet<ArchivedTarget> ArchivedTargets { get; set; }
        public virtual DbSet<AutoExposureMethod> AutoExposureMethods { get; set; }
        public virtual DbSet<AutoFocusMethod> AutoFocusMethods { get; set; }
        public virtual DbSet<BleedThroughCheckMethod> BleedThroughCheckMethods { get; set; }
        public virtual DbSet<BorderFindMethod> BorderFindMethods { get; set; }
        public virtual DbSet<BoundReportElement> BoundReportElements { get; set; }
        public virtual DbSet<BoundReportSection> BoundReportSections { get; set; }
        public virtual DbSet<Cassette> Cassettes { get; set; }
        public virtual DbSet<DepositionArea> DepositionAreas { get; set; }
        public virtual DbSet<DepositionAreaMethodAttributeValue> DepositionAreaMethodAttributeValues { get; set; }
        public virtual DbSet<DepositionShape> DepositionShapes { get; set; }
        public virtual DbSet<DMLAuditLog> DMLAuditLogs { get; set; }
        public virtual DbSet<DotCountingMethod> DotCountingMethods { get; set; }
        public virtual DbSet<DotCountingMethodAttributeValue> DotCountingMethodAttributeValues { get; set; }
        public virtual DbSet<ExplorerLog> ExplorerLogs { get; set; }
        public virtual DbSet<Field> Fields { get; set; }
        public virtual DbSet<FieldChannel> FieldChannels { get; set; }
        public virtual DbSet<FilterSet> FilterSets { get; set; }
        public virtual DbSet<FindBestSliceMethod> FindBestSliceMethods { get; set; }
        public virtual DbSet<GenericApp> GenericApps { get; set; }
        public virtual DbSet<GenericAppConfig> GenericAppConfigs { get; set; }
        public virtual DbSet<GenericAppMethod> GenericAppMethods { get; set; }
        public virtual DbSet<GenericAppScan> GenericAppScans { get; set; }
        public virtual DbSet<GenericAppScanConfig> GenericAppScanConfigs { get; set; }
        public virtual DbSet<GenericAppScanConfigMethodAttributeValue> GenericAppScanConfigMethodAttributeValues { get; set; }
        public virtual DbSet<GenericAppScanStructure> GenericAppScanStructures { get; set; }
        public virtual DbSet<GenericChannelConfig> GenericChannelConfigs { get; set; }
        public virtual DbSet<GenericChannelConfigMethodAttributeValue> GenericChannelConfigMethodAttributeValues { get; set; }
        public virtual DbSet<HelpText> HelpTexts { get; set; }
        public virtual DbSet<IkoGroup> IkoGroups { get; set; }
        public virtual DbSet<IkoGroupUser> IkoGroupUsers { get; set; }
        public virtual DbSet<IkoLog> IkoLogs { get; set; }
        public virtual DbSet<IkoUser> IkoUsers { get; set; }
        public virtual DbSet<IkoUserRole> IkoUserRoles { get; set; }
        public virtual DbSet<ImageLocation> ImageLocations { get; set; }
        public virtual DbSet<Laboratory> Laboratories { get; set; }
        public virtual DbSet<MethodAttribute> MethodAttributes { get; set; }
        public virtual DbSet<NewSlideTemplate> NewSlideTemplates { get; set; }
        public virtual DbSet<OrphanedTarget> OrphanedTargets { get; set; }
        public virtual DbSet<OrphanedTargetChannel> OrphanedTargetChannels { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PostprocessingMethod> PostprocessingMethods { get; set; }
        public virtual DbSet<PreprocessingMethod> PreprocessingMethods { get; set; }
        public virtual DbSet<ProbeQcSignal> ProbeQcSignals { get; set; }
        public virtual DbSet<PurgedSlideRun> PurgedSlideRuns { get; set; }
        public virtual DbSet<ReorderFieldVisitSequenceMethod> ReorderFieldVisitSequenceMethods { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportElement> ReportElements { get; set; }
        public virtual DbSet<ReportSection> ReportSections { get; set; }
        public virtual DbSet<ReviewedDotCount> ReviewedDotCounts { get; set; }
        public virtual DbSet<ReviewedTarget> ReviewedTargets { get; set; }
        public virtual DbSet<Sample> Samples { get; set; }
        public virtual DbSet<SampleType> SampleTypes { get; set; }
        public virtual DbSet<ScanAreaRedefiningMethod> ScanAreaRedefiningMethods { get; set; }
        public virtual DbSet<Scanner> Scanners { get; set; }
        public virtual DbSet<SkipFieldConditionMethod> SkipFieldConditionMethods { get; set; }
        public virtual DbSet<Slide> Slides { get; set; }
        public virtual DbSet<SlideAdaptationMethod> SlideAdaptationMethods { get; set; }
        public virtual DbSet<SlideArea> SlideAreas { get; set; }
        public virtual DbSet<SlideAttribute> SlideAttributes { get; set; }
        public virtual DbSet<SlideAttributeValue> SlideAttributeValues { get; set; }
        public virtual DbSet<SlideRun> SlideRuns { get; set; }
        public virtual DbSet<SlideRunAppScan> SlideRunAppScans { get; set; }
        public virtual DbSet<SlideRunAppScanStatistic> SlideRunAppScanStatistics { get; set; }
        public virtual DbSet<SlideRunBrightField> SlideRunBrightFields { get; set; }
        public virtual DbSet<SlideRunBrightFieldAssociation> SlideRunBrightFieldAssociations { get; set; }
        public virtual DbSet<SlideRunLock> SlideRunLocks { get; set; }
        public virtual DbSet<SlideStatu> SlideStatus { get; set; }
        public virtual DbSet<SlideType> SlideTypes { get; set; }
        public virtual DbSet<SlideTypeAssociation> SlideTypeAssociations { get; set; }
        public virtual DbSet<StopConditionMethod> StopConditionMethods { get; set; }
        public virtual DbSet<Structure> Structures { get; set; }
        public virtual DbSet<StructureCategory> StructureCategories { get; set; }
        public virtual DbSet<Study> Studies { get; set; }
        public virtual DbSet<StudySlideRun> StudySlideRuns { get; set; }
        public virtual DbSet<StudyTarget> StudyTargets { get; set; }
        public virtual DbSet<StudyUser> StudyUsers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Target> Targets { get; set; }
        public virtual DbSet<TargetChannel> TargetChannels { get; set; }
        public virtual DbSet<TargetClassBinningMethod> TargetClassBinningMethods { get; set; }
        public virtual DbSet<TargetClassification> TargetClassifications { get; set; }
        public virtual DbSet<TargetClassificationMethod> TargetClassificationMethods { get; set; }
        public virtual DbSet<TargetClassificationSet> TargetClassificationSets { get; set; }
        public virtual DbSet<TargetReviewStatu> TargetReviewStatus { get; set; }
        public virtual DbSet<TargetSelectionMethod> TargetSelectionMethods { get; set; }
        public virtual DbSet<TargetStatistic> TargetStatistics { get; set; }
        public virtual DbSet<Version> Versions { get; set; }
        public virtual DbSet<VisitSequenceMethod> VisitSequenceMethods { get; set; }
        public virtual DbSet<Exp_Slide> Exp_Slide { get; set; }
    
        [DbFunction("DBEntities", "SplitIDs")]
        public virtual IQueryable<SplitIDs_Result> SplitIDs(string idList)
        {
            var idListParameter = idList != null ?
                new ObjectParameter("IdList", idList) :
                new ObjectParameter("IdList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitIDs_Result>("[DBEntities].[SplitIDs](@IdList)", idListParameter);
        }
    
        public virtual int FinalizeSlideRun(string slideBarcode, Nullable<System.DateTime> startTime)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FinalizeSlideRun", slideBarcodeParameter, startTimeParameter);
        }
    
        public virtual int InsertArchivedSlideRun(string slideBarcode, Nullable<System.DateTime> startTime)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertArchivedSlideRun", slideBarcodeParameter, startTimeParameter);
        }
    
        public virtual int InsertArchivedTarget(string slideBarcode, Nullable<System.DateTime> startTime, Nullable<int> targetLowMagVisitSequence)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var targetLowMagVisitSequenceParameter = targetLowMagVisitSequence.HasValue ?
                new ObjectParameter("TargetLowMagVisitSequence", targetLowMagVisitSequence) :
                new ObjectParameter("TargetLowMagVisitSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertArchivedTarget", slideBarcodeParameter, startTimeParameter, targetLowMagVisitSequenceParameter);
        }
    
        public virtual int InsertBoundReportElement(string reportName, string reportSectionName, Nullable<int> sequence, string reportElementName, Nullable<int> justification)
        {
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            var reportSectionNameParameter = reportSectionName != null ?
                new ObjectParameter("ReportSectionName", reportSectionName) :
                new ObjectParameter("ReportSectionName", typeof(string));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var reportElementNameParameter = reportElementName != null ?
                new ObjectParameter("ReportElementName", reportElementName) :
                new ObjectParameter("ReportElementName", typeof(string));
    
            var justificationParameter = justification.HasValue ?
                new ObjectParameter("Justification", justification) :
                new ObjectParameter("Justification", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBoundReportElement", reportNameParameter, reportSectionNameParameter, sequenceParameter, reportElementNameParameter, justificationParameter);
        }
    
        public virtual int InsertBoundReportSection(string reportName, string reportSectionName, Nullable<int> sequence)
        {
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            var reportSectionNameParameter = reportSectionName != null ?
                new ObjectParameter("ReportSectionName", reportSectionName) :
                new ObjectParameter("ReportSectionName", typeof(string));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBoundReportSection", reportNameParameter, reportSectionNameParameter, sequenceParameter);
        }
    
        public virtual int InsertCassette(string barcode, string scannerName)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var scannerNameParameter = scannerName != null ?
                new ObjectParameter("ScannerName", scannerName) :
                new ObjectParameter("ScannerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCassette", barcodeParameter, scannerNameParameter);
        }
    
        public virtual int InsertDepositionArea(string name, Nullable<bool> useAutoFind, string borderFindMethodName, Nullable<double> centerCoordinate_X, Nullable<double> centerCoordinate_Y, Nullable<double> heightSpan, Nullable<double> widthSpan, Nullable<bool> allowEdit)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var useAutoFindParameter = useAutoFind.HasValue ?
                new ObjectParameter("UseAutoFind", useAutoFind) :
                new ObjectParameter("UseAutoFind", typeof(bool));
    
            var borderFindMethodNameParameter = borderFindMethodName != null ?
                new ObjectParameter("BorderFindMethodName", borderFindMethodName) :
                new ObjectParameter("BorderFindMethodName", typeof(string));
    
            var centerCoordinate_XParameter = centerCoordinate_X.HasValue ?
                new ObjectParameter("CenterCoordinate_X", centerCoordinate_X) :
                new ObjectParameter("CenterCoordinate_X", typeof(double));
    
            var centerCoordinate_YParameter = centerCoordinate_Y.HasValue ?
                new ObjectParameter("CenterCoordinate_Y", centerCoordinate_Y) :
                new ObjectParameter("CenterCoordinate_Y", typeof(double));
    
            var heightSpanParameter = heightSpan.HasValue ?
                new ObjectParameter("HeightSpan", heightSpan) :
                new ObjectParameter("HeightSpan", typeof(double));
    
            var widthSpanParameter = widthSpan.HasValue ?
                new ObjectParameter("WidthSpan", widthSpan) :
                new ObjectParameter("WidthSpan", typeof(double));
    
            var allowEditParameter = allowEdit.HasValue ?
                new ObjectParameter("AllowEdit", allowEdit) :
                new ObjectParameter("AllowEdit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDepositionArea", nameParameter, useAutoFindParameter, borderFindMethodNameParameter, centerCoordinate_XParameter, centerCoordinate_YParameter, heightSpanParameter, widthSpanParameter, allowEditParameter);
        }
    
        public virtual int InsertDepositionAreaMethodAttributeValue(string depositionAreaName, string attributeName, string attributeValue)
        {
            var depositionAreaNameParameter = depositionAreaName != null ?
                new ObjectParameter("DepositionAreaName", depositionAreaName) :
                new ObjectParameter("DepositionAreaName", typeof(string));
    
            var attributeNameParameter = attributeName != null ?
                new ObjectParameter("AttributeName", attributeName) :
                new ObjectParameter("AttributeName", typeof(string));
    
            var attributeValueParameter = attributeValue != null ?
                new ObjectParameter("AttributeValue", attributeValue) :
                new ObjectParameter("AttributeValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDepositionAreaMethodAttributeValue", depositionAreaNameParameter, attributeNameParameter, attributeValueParameter);
        }
    
        public virtual int InsertDepositionShape(string name, string depositionAreaName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var depositionAreaNameParameter = depositionAreaName != null ?
                new ObjectParameter("DepositionAreaName", depositionAreaName) :
                new ObjectParameter("DepositionAreaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDepositionShape", nameParameter, depositionAreaNameParameter);
        }
    
        public virtual int InsertDotCountingMethodAttributeValue(string dotCountingMethodName, string attributeName, string attributeValue)
        {
            var dotCountingMethodNameParameter = dotCountingMethodName != null ?
                new ObjectParameter("DotCountingMethodName", dotCountingMethodName) :
                new ObjectParameter("DotCountingMethodName", typeof(string));
    
            var attributeNameParameter = attributeName != null ?
                new ObjectParameter("AttributeName", attributeName) :
                new ObjectParameter("AttributeName", typeof(string));
    
            var attributeValueParameter = attributeValue != null ?
                new ObjectParameter("AttributeValue", attributeValue) :
                new ObjectParameter("AttributeValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDotCountingMethodAttributeValue", dotCountingMethodNameParameter, attributeNameParameter, attributeValueParameter);
        }
    
        public virtual int InsertField(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, Nullable<int> genericAppScanLevel, Nullable<double> fieldLocationXInMicron, Nullable<double> fieldLocationYInMicron, Nullable<int> numberOfTargets, Nullable<int> numberofNuclei, Nullable<int> depositionShapeVisitSequence, Nullable<int> visitSequence)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var fieldLocationXInMicronParameter = fieldLocationXInMicron.HasValue ?
                new ObjectParameter("FieldLocationXInMicron", fieldLocationXInMicron) :
                new ObjectParameter("FieldLocationXInMicron", typeof(double));
    
            var fieldLocationYInMicronParameter = fieldLocationYInMicron.HasValue ?
                new ObjectParameter("FieldLocationYInMicron", fieldLocationYInMicron) :
                new ObjectParameter("FieldLocationYInMicron", typeof(double));
    
            var numberOfTargetsParameter = numberOfTargets.HasValue ?
                new ObjectParameter("NumberOfTargets", numberOfTargets) :
                new ObjectParameter("NumberOfTargets", typeof(int));
    
            var numberofNucleiParameter = numberofNuclei.HasValue ?
                new ObjectParameter("NumberofNuclei", numberofNuclei) :
                new ObjectParameter("NumberofNuclei", typeof(int));
    
            var depositionShapeVisitSequenceParameter = depositionShapeVisitSequence.HasValue ?
                new ObjectParameter("DepositionShapeVisitSequence", depositionShapeVisitSequence) :
                new ObjectParameter("DepositionShapeVisitSequence", typeof(int));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertField", slideBarcodeParameter, slideRunStartTimeParameter, genericAppScanLevelParameter, fieldLocationXInMicronParameter, fieldLocationYInMicronParameter, numberOfTargetsParameter, numberofNucleiParameter, depositionShapeVisitSequenceParameter, visitSequenceParameter);
        }
    
        public virtual int InsertField2(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, Nullable<int> genericAppScanLevel, Nullable<double> fieldLocationXInMicron, Nullable<double> fieldLocationYInMicron, Nullable<int> numberOfTargets, Nullable<int> numberofNuclei, Nullable<int> depositionShapeVisitSequence, Nullable<int> visitSequence, Nullable<float> offsetXInMicron, Nullable<float> offsetYInMicron)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var fieldLocationXInMicronParameter = fieldLocationXInMicron.HasValue ?
                new ObjectParameter("FieldLocationXInMicron", fieldLocationXInMicron) :
                new ObjectParameter("FieldLocationXInMicron", typeof(double));
    
            var fieldLocationYInMicronParameter = fieldLocationYInMicron.HasValue ?
                new ObjectParameter("FieldLocationYInMicron", fieldLocationYInMicron) :
                new ObjectParameter("FieldLocationYInMicron", typeof(double));
    
            var numberOfTargetsParameter = numberOfTargets.HasValue ?
                new ObjectParameter("NumberOfTargets", numberOfTargets) :
                new ObjectParameter("NumberOfTargets", typeof(int));
    
            var numberofNucleiParameter = numberofNuclei.HasValue ?
                new ObjectParameter("NumberofNuclei", numberofNuclei) :
                new ObjectParameter("NumberofNuclei", typeof(int));
    
            var depositionShapeVisitSequenceParameter = depositionShapeVisitSequence.HasValue ?
                new ObjectParameter("DepositionShapeVisitSequence", depositionShapeVisitSequence) :
                new ObjectParameter("DepositionShapeVisitSequence", typeof(int));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            var offsetXInMicronParameter = offsetXInMicron.HasValue ?
                new ObjectParameter("OffsetXInMicron", offsetXInMicron) :
                new ObjectParameter("OffsetXInMicron", typeof(float));
    
            var offsetYInMicronParameter = offsetYInMicron.HasValue ?
                new ObjectParameter("OffsetYInMicron", offsetYInMicron) :
                new ObjectParameter("OffsetYInMicron", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertField2", slideBarcodeParameter, slideRunStartTimeParameter, genericAppScanLevelParameter, fieldLocationXInMicronParameter, fieldLocationYInMicronParameter, numberOfTargetsParameter, numberofNucleiParameter, depositionShapeVisitSequenceParameter, visitSequenceParameter, offsetXInMicronParameter, offsetYInMicronParameter);
        }
    
        public virtual int InsertFieldChannel(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, string genericAppConfigName, Nullable<int> genericAppScanLevel, string structureName, Nullable<int> fieldVisitSequence, Nullable<float> exposureMilliseconds, Nullable<float> focusPositionInMicron, Nullable<int> channelVisitSequence)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var fieldVisitSequenceParameter = fieldVisitSequence.HasValue ?
                new ObjectParameter("FieldVisitSequence", fieldVisitSequence) :
                new ObjectParameter("FieldVisitSequence", typeof(int));
    
            var exposureMillisecondsParameter = exposureMilliseconds.HasValue ?
                new ObjectParameter("ExposureMilliseconds", exposureMilliseconds) :
                new ObjectParameter("ExposureMilliseconds", typeof(float));
    
            var focusPositionInMicronParameter = focusPositionInMicron.HasValue ?
                new ObjectParameter("FocusPositionInMicron", focusPositionInMicron) :
                new ObjectParameter("FocusPositionInMicron", typeof(float));
    
            var channelVisitSequenceParameter = channelVisitSequence.HasValue ?
                new ObjectParameter("ChannelVisitSequence", channelVisitSequence) :
                new ObjectParameter("ChannelVisitSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFieldChannel", slideBarcodeParameter, slideRunStartTimeParameter, genericAppConfigNameParameter, genericAppScanLevelParameter, structureNameParameter, fieldVisitSequenceParameter, exposureMillisecondsParameter, focusPositionInMicronParameter, channelVisitSequenceParameter);
        }
    
        public virtual int InsertFilterSet(string name, string abbreviation, Nullable<byte> red, Nullable<byte> green, Nullable<byte> blue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var redParameter = red.HasValue ?
                new ObjectParameter("Red", red) :
                new ObjectParameter("Red", typeof(byte));
    
            var greenParameter = green.HasValue ?
                new ObjectParameter("Green", green) :
                new ObjectParameter("Green", typeof(byte));
    
            var blueParameter = blue.HasValue ?
                new ObjectParameter("Blue", blue) :
                new ObjectParameter("Blue", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFilterSet", nameParameter, abbreviationParameter, redParameter, greenParameter, blueParameter);
        }
    
        public virtual int InsertGenericApp(string name, string description, string abbreviation, string reportName, string targetClassificationName, Nullable<bool> allowEdit, Nullable<int> revision)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            var targetClassificationNameParameter = targetClassificationName != null ?
                new ObjectParameter("TargetClassificationName", targetClassificationName) :
                new ObjectParameter("TargetClassificationName", typeof(string));
    
            var allowEditParameter = allowEdit.HasValue ?
                new ObjectParameter("AllowEdit", allowEdit) :
                new ObjectParameter("AllowEdit", typeof(bool));
    
            var revisionParameter = revision.HasValue ?
                new ObjectParameter("Revision", revision) :
                new ObjectParameter("Revision", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericApp", nameParameter, descriptionParameter, abbreviationParameter, reportNameParameter, targetClassificationNameParameter, allowEditParameter, revisionParameter);
        }
    
        public virtual int InsertGenericAppConfig(string genericAppName, string name, Nullable<bool> isDefault, Nullable<bool> allowEdit)
        {
            var genericAppNameParameter = genericAppName != null ?
                new ObjectParameter("GenericAppName", genericAppName) :
                new ObjectParameter("GenericAppName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var allowEditParameter = allowEdit.HasValue ?
                new ObjectParameter("AllowEdit", allowEdit) :
                new ObjectParameter("AllowEdit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericAppConfig", genericAppNameParameter, nameParameter, isDefaultParameter, allowEditParameter);
        }
    
        public virtual int InsertGenericAppScan(string genericAppName, Nullable<int> scanLevel, Nullable<double> objectivePower, string preprocessingMethodName, string slideAdaptationMethodName, string targetSelectionMethodName, string scanAreaRedefiningMethodName, string reorderFieldVisitSequenceMethodName, string bleedThroughCheckMethodName, string targetClassificationMethodName, string targetClassBinningMethodName, string stopContidionMethodName, string postprocessingMethodName, string levelName, string targetsName, Nullable<bool> measureParcentricity)
        {
            var genericAppNameParameter = genericAppName != null ?
                new ObjectParameter("GenericAppName", genericAppName) :
                new ObjectParameter("GenericAppName", typeof(string));
    
            var scanLevelParameter = scanLevel.HasValue ?
                new ObjectParameter("ScanLevel", scanLevel) :
                new ObjectParameter("ScanLevel", typeof(int));
    
            var objectivePowerParameter = objectivePower.HasValue ?
                new ObjectParameter("ObjectivePower", objectivePower) :
                new ObjectParameter("ObjectivePower", typeof(double));
    
            var preprocessingMethodNameParameter = preprocessingMethodName != null ?
                new ObjectParameter("PreprocessingMethodName", preprocessingMethodName) :
                new ObjectParameter("PreprocessingMethodName", typeof(string));
    
            var slideAdaptationMethodNameParameter = slideAdaptationMethodName != null ?
                new ObjectParameter("SlideAdaptationMethodName", slideAdaptationMethodName) :
                new ObjectParameter("SlideAdaptationMethodName", typeof(string));
    
            var targetSelectionMethodNameParameter = targetSelectionMethodName != null ?
                new ObjectParameter("TargetSelectionMethodName", targetSelectionMethodName) :
                new ObjectParameter("TargetSelectionMethodName", typeof(string));
    
            var scanAreaRedefiningMethodNameParameter = scanAreaRedefiningMethodName != null ?
                new ObjectParameter("ScanAreaRedefiningMethodName", scanAreaRedefiningMethodName) :
                new ObjectParameter("ScanAreaRedefiningMethodName", typeof(string));
    
            var reorderFieldVisitSequenceMethodNameParameter = reorderFieldVisitSequenceMethodName != null ?
                new ObjectParameter("ReorderFieldVisitSequenceMethodName", reorderFieldVisitSequenceMethodName) :
                new ObjectParameter("ReorderFieldVisitSequenceMethodName", typeof(string));
    
            var bleedThroughCheckMethodNameParameter = bleedThroughCheckMethodName != null ?
                new ObjectParameter("BleedThroughCheckMethodName", bleedThroughCheckMethodName) :
                new ObjectParameter("BleedThroughCheckMethodName", typeof(string));
    
            var targetClassificationMethodNameParameter = targetClassificationMethodName != null ?
                new ObjectParameter("TargetClassificationMethodName", targetClassificationMethodName) :
                new ObjectParameter("TargetClassificationMethodName", typeof(string));
    
            var targetClassBinningMethodNameParameter = targetClassBinningMethodName != null ?
                new ObjectParameter("TargetClassBinningMethodName", targetClassBinningMethodName) :
                new ObjectParameter("TargetClassBinningMethodName", typeof(string));
    
            var stopContidionMethodNameParameter = stopContidionMethodName != null ?
                new ObjectParameter("StopContidionMethodName", stopContidionMethodName) :
                new ObjectParameter("StopContidionMethodName", typeof(string));
    
            var postprocessingMethodNameParameter = postprocessingMethodName != null ?
                new ObjectParameter("PostprocessingMethodName", postprocessingMethodName) :
                new ObjectParameter("PostprocessingMethodName", typeof(string));
    
            var levelNameParameter = levelName != null ?
                new ObjectParameter("LevelName", levelName) :
                new ObjectParameter("LevelName", typeof(string));
    
            var targetsNameParameter = targetsName != null ?
                new ObjectParameter("TargetsName", targetsName) :
                new ObjectParameter("TargetsName", typeof(string));
    
            var measureParcentricityParameter = measureParcentricity.HasValue ?
                new ObjectParameter("MeasureParcentricity", measureParcentricity) :
                new ObjectParameter("MeasureParcentricity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericAppScan", genericAppNameParameter, scanLevelParameter, objectivePowerParameter, preprocessingMethodNameParameter, slideAdaptationMethodNameParameter, targetSelectionMethodNameParameter, scanAreaRedefiningMethodNameParameter, reorderFieldVisitSequenceMethodNameParameter, bleedThroughCheckMethodNameParameter, targetClassificationMethodNameParameter, targetClassBinningMethodNameParameter, stopContidionMethodNameParameter, postprocessingMethodNameParameter, levelNameParameter, targetsNameParameter, measureParcentricityParameter);
        }
    
        public virtual int InsertGenericAppScanConfig(string generciAppConfigName, Nullable<double> fieldOverlapXInMicron, Nullable<double> fieldOverlapYInMicron, Nullable<int> acquisitionBinningMode, Nullable<int> numberOfSlices, Nullable<int> centerSliceOffset, Nullable<int> numberOfTargets, Nullable<int> genericAppScanLevel, string visitSequenceMethodName, Nullable<bool> allowRepeatScan, Nullable<bool> useMaximizeTargetCountsPerField)
        {
            var generciAppConfigNameParameter = generciAppConfigName != null ?
                new ObjectParameter("GenerciAppConfigName", generciAppConfigName) :
                new ObjectParameter("GenerciAppConfigName", typeof(string));
    
            var fieldOverlapXInMicronParameter = fieldOverlapXInMicron.HasValue ?
                new ObjectParameter("FieldOverlapXInMicron", fieldOverlapXInMicron) :
                new ObjectParameter("FieldOverlapXInMicron", typeof(double));
    
            var fieldOverlapYInMicronParameter = fieldOverlapYInMicron.HasValue ?
                new ObjectParameter("FieldOverlapYInMicron", fieldOverlapYInMicron) :
                new ObjectParameter("FieldOverlapYInMicron", typeof(double));
    
            var acquisitionBinningModeParameter = acquisitionBinningMode.HasValue ?
                new ObjectParameter("AcquisitionBinningMode", acquisitionBinningMode) :
                new ObjectParameter("AcquisitionBinningMode", typeof(int));
    
            var numberOfSlicesParameter = numberOfSlices.HasValue ?
                new ObjectParameter("NumberOfSlices", numberOfSlices) :
                new ObjectParameter("NumberOfSlices", typeof(int));
    
            var centerSliceOffsetParameter = centerSliceOffset.HasValue ?
                new ObjectParameter("CenterSliceOffset", centerSliceOffset) :
                new ObjectParameter("CenterSliceOffset", typeof(int));
    
            var numberOfTargetsParameter = numberOfTargets.HasValue ?
                new ObjectParameter("NumberOfTargets", numberOfTargets) :
                new ObjectParameter("NumberOfTargets", typeof(int));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var visitSequenceMethodNameParameter = visitSequenceMethodName != null ?
                new ObjectParameter("VisitSequenceMethodName", visitSequenceMethodName) :
                new ObjectParameter("VisitSequenceMethodName", typeof(string));
    
            var allowRepeatScanParameter = allowRepeatScan.HasValue ?
                new ObjectParameter("AllowRepeatScan", allowRepeatScan) :
                new ObjectParameter("AllowRepeatScan", typeof(bool));
    
            var useMaximizeTargetCountsPerFieldParameter = useMaximizeTargetCountsPerField.HasValue ?
                new ObjectParameter("UseMaximizeTargetCountsPerField", useMaximizeTargetCountsPerField) :
                new ObjectParameter("UseMaximizeTargetCountsPerField", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericAppScanConfig", generciAppConfigNameParameter, fieldOverlapXInMicronParameter, fieldOverlapYInMicronParameter, acquisitionBinningModeParameter, numberOfSlicesParameter, centerSliceOffsetParameter, numberOfTargetsParameter, genericAppScanLevelParameter, visitSequenceMethodNameParameter, allowRepeatScanParameter, useMaximizeTargetCountsPerFieldParameter);
        }
    
        public virtual int InsertGenericAppScanConfigMethodAttributeValue(string genericAppConfigName, Nullable<int> genericAppScanLevel, string attributeName, string attributeValue)
        {
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var attributeNameParameter = attributeName != null ?
                new ObjectParameter("AttributeName", attributeName) :
                new ObjectParameter("AttributeName", typeof(string));
    
            var attributeValueParameter = attributeValue != null ?
                new ObjectParameter("AttributeValue", attributeValue) :
                new ObjectParameter("AttributeValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericAppScanConfigMethodAttributeValue", genericAppConfigNameParameter, genericAppScanLevelParameter, attributeNameParameter, attributeValueParameter);
        }
    
        public virtual int InsertGenericAppScanStructure(string genericAppName, Nullable<int> genericAppScanLevel, string structureName, Nullable<int> visitSequence, Nullable<bool> isDisplayedByDefault)
        {
            var genericAppNameParameter = genericAppName != null ?
                new ObjectParameter("GenericAppName", genericAppName) :
                new ObjectParameter("GenericAppName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            var isDisplayedByDefaultParameter = isDisplayedByDefault.HasValue ?
                new ObjectParameter("IsDisplayedByDefault", isDisplayedByDefault) :
                new ObjectParameter("IsDisplayedByDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericAppScanStructure", genericAppNameParameter, genericAppScanLevelParameter, structureNameParameter, visitSequenceParameter, isDisplayedByDefaultParameter);
        }
    
        public virtual int InsertGenericChannelConfig(string genericAppConfigName, Nullable<int> genericAppScanLevel, string structureName, Nullable<int> visitSequence, string filterSetName, Nullable<bool> isAutoExposed, Nullable<float> manualExposureMilliseconds, string autoFocusMethodName, string autoExposureMethodName, Nullable<bool> applyFlatFieldCorrection, Nullable<int> acquisitionCameraGain, string dotCountingMethodName, string skipFieldConditionMethodName, string findBestSliceMethodName, Nullable<int> compressionRatio, Nullable<bool> allowEdit)
        {
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            var filterSetNameParameter = filterSetName != null ?
                new ObjectParameter("FilterSetName", filterSetName) :
                new ObjectParameter("FilterSetName", typeof(string));
    
            var isAutoExposedParameter = isAutoExposed.HasValue ?
                new ObjectParameter("IsAutoExposed", isAutoExposed) :
                new ObjectParameter("IsAutoExposed", typeof(bool));
    
            var manualExposureMillisecondsParameter = manualExposureMilliseconds.HasValue ?
                new ObjectParameter("ManualExposureMilliseconds", manualExposureMilliseconds) :
                new ObjectParameter("ManualExposureMilliseconds", typeof(float));
    
            var autoFocusMethodNameParameter = autoFocusMethodName != null ?
                new ObjectParameter("AutoFocusMethodName", autoFocusMethodName) :
                new ObjectParameter("AutoFocusMethodName", typeof(string));
    
            var autoExposureMethodNameParameter = autoExposureMethodName != null ?
                new ObjectParameter("AutoExposureMethodName", autoExposureMethodName) :
                new ObjectParameter("AutoExposureMethodName", typeof(string));
    
            var applyFlatFieldCorrectionParameter = applyFlatFieldCorrection.HasValue ?
                new ObjectParameter("ApplyFlatFieldCorrection", applyFlatFieldCorrection) :
                new ObjectParameter("ApplyFlatFieldCorrection", typeof(bool));
    
            var acquisitionCameraGainParameter = acquisitionCameraGain.HasValue ?
                new ObjectParameter("AcquisitionCameraGain", acquisitionCameraGain) :
                new ObjectParameter("AcquisitionCameraGain", typeof(int));
    
            var dotCountingMethodNameParameter = dotCountingMethodName != null ?
                new ObjectParameter("DotCountingMethodName", dotCountingMethodName) :
                new ObjectParameter("DotCountingMethodName", typeof(string));
    
            var skipFieldConditionMethodNameParameter = skipFieldConditionMethodName != null ?
                new ObjectParameter("SkipFieldConditionMethodName", skipFieldConditionMethodName) :
                new ObjectParameter("SkipFieldConditionMethodName", typeof(string));
    
            var findBestSliceMethodNameParameter = findBestSliceMethodName != null ?
                new ObjectParameter("FindBestSliceMethodName", findBestSliceMethodName) :
                new ObjectParameter("FindBestSliceMethodName", typeof(string));
    
            var compressionRatioParameter = compressionRatio.HasValue ?
                new ObjectParameter("CompressionRatio", compressionRatio) :
                new ObjectParameter("CompressionRatio", typeof(int));
    
            var allowEditParameter = allowEdit.HasValue ?
                new ObjectParameter("AllowEdit", allowEdit) :
                new ObjectParameter("AllowEdit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericChannelConfig", genericAppConfigNameParameter, genericAppScanLevelParameter, structureNameParameter, visitSequenceParameter, filterSetNameParameter, isAutoExposedParameter, manualExposureMillisecondsParameter, autoFocusMethodNameParameter, autoExposureMethodNameParameter, applyFlatFieldCorrectionParameter, acquisitionCameraGainParameter, dotCountingMethodNameParameter, skipFieldConditionMethodNameParameter, findBestSliceMethodNameParameter, compressionRatioParameter, allowEditParameter);
        }
    
        public virtual int InsertGenericChannelConfig2(string genericAppConfigName, Nullable<int> genericAppScanLevel, string structureName, Nullable<int> visitSequence, string filterSetName, Nullable<bool> isAutoExposed, Nullable<float> manualExposureMilliseconds, string autoFocusMethodName, string autoExposureMethodName, Nullable<bool> applyFlatFieldCorrection, Nullable<int> acquisitionCameraGain, string dotCountingMethodName, string skipFieldConditionMethodName, string findBestSliceMethodName, Nullable<int> compressionRatio, Nullable<bool> allowEdit, Nullable<bool> isBrightField)
        {
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            var filterSetNameParameter = filterSetName != null ?
                new ObjectParameter("FilterSetName", filterSetName) :
                new ObjectParameter("FilterSetName", typeof(string));
    
            var isAutoExposedParameter = isAutoExposed.HasValue ?
                new ObjectParameter("IsAutoExposed", isAutoExposed) :
                new ObjectParameter("IsAutoExposed", typeof(bool));
    
            var manualExposureMillisecondsParameter = manualExposureMilliseconds.HasValue ?
                new ObjectParameter("ManualExposureMilliseconds", manualExposureMilliseconds) :
                new ObjectParameter("ManualExposureMilliseconds", typeof(float));
    
            var autoFocusMethodNameParameter = autoFocusMethodName != null ?
                new ObjectParameter("AutoFocusMethodName", autoFocusMethodName) :
                new ObjectParameter("AutoFocusMethodName", typeof(string));
    
            var autoExposureMethodNameParameter = autoExposureMethodName != null ?
                new ObjectParameter("AutoExposureMethodName", autoExposureMethodName) :
                new ObjectParameter("AutoExposureMethodName", typeof(string));
    
            var applyFlatFieldCorrectionParameter = applyFlatFieldCorrection.HasValue ?
                new ObjectParameter("ApplyFlatFieldCorrection", applyFlatFieldCorrection) :
                new ObjectParameter("ApplyFlatFieldCorrection", typeof(bool));
    
            var acquisitionCameraGainParameter = acquisitionCameraGain.HasValue ?
                new ObjectParameter("AcquisitionCameraGain", acquisitionCameraGain) :
                new ObjectParameter("AcquisitionCameraGain", typeof(int));
    
            var dotCountingMethodNameParameter = dotCountingMethodName != null ?
                new ObjectParameter("DotCountingMethodName", dotCountingMethodName) :
                new ObjectParameter("DotCountingMethodName", typeof(string));
    
            var skipFieldConditionMethodNameParameter = skipFieldConditionMethodName != null ?
                new ObjectParameter("SkipFieldConditionMethodName", skipFieldConditionMethodName) :
                new ObjectParameter("SkipFieldConditionMethodName", typeof(string));
    
            var findBestSliceMethodNameParameter = findBestSliceMethodName != null ?
                new ObjectParameter("FindBestSliceMethodName", findBestSliceMethodName) :
                new ObjectParameter("FindBestSliceMethodName", typeof(string));
    
            var compressionRatioParameter = compressionRatio.HasValue ?
                new ObjectParameter("CompressionRatio", compressionRatio) :
                new ObjectParameter("CompressionRatio", typeof(int));
    
            var allowEditParameter = allowEdit.HasValue ?
                new ObjectParameter("AllowEdit", allowEdit) :
                new ObjectParameter("AllowEdit", typeof(bool));
    
            var isBrightFieldParameter = isBrightField.HasValue ?
                new ObjectParameter("IsBrightField", isBrightField) :
                new ObjectParameter("IsBrightField", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericChannelConfig2", genericAppConfigNameParameter, genericAppScanLevelParameter, structureNameParameter, visitSequenceParameter, filterSetNameParameter, isAutoExposedParameter, manualExposureMillisecondsParameter, autoFocusMethodNameParameter, autoExposureMethodNameParameter, applyFlatFieldCorrectionParameter, acquisitionCameraGainParameter, dotCountingMethodNameParameter, skipFieldConditionMethodNameParameter, findBestSliceMethodNameParameter, compressionRatioParameter, allowEditParameter, isBrightFieldParameter);
        }
    
        public virtual int InsertGenericChannelConfigMethodAttributeValue(string genericAppConfigName, Nullable<int> genericAppScanLevel, string structureName, Nullable<int> channelVisitSequence, string attributeName, string attributeValue)
        {
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var channelVisitSequenceParameter = channelVisitSequence.HasValue ?
                new ObjectParameter("ChannelVisitSequence", channelVisitSequence) :
                new ObjectParameter("ChannelVisitSequence", typeof(int));
    
            var attributeNameParameter = attributeName != null ?
                new ObjectParameter("AttributeName", attributeName) :
                new ObjectParameter("AttributeName", typeof(string));
    
            var attributeValueParameter = attributeValue != null ?
                new ObjectParameter("AttributeValue", attributeValue) :
                new ObjectParameter("AttributeValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenericChannelConfigMethodAttributeValue", genericAppConfigNameParameter, genericAppScanLevelParameter, structureNameParameter, channelVisitSequenceParameter, attributeNameParameter, attributeValueParameter);
        }
    
        public virtual int InsertImageLocation(string name, string host, Nullable<int> port, Nullable<bool> isDefault)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var portParameter = port.HasValue ?
                new ObjectParameter("Port", port) :
                new ObjectParameter("Port", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertImageLocation", nameParameter, hostParameter, portParameter, isDefaultParameter);
        }
    
        public virtual int InsertLaboratory(string name, string abbreviation, Nullable<int> accession, Nullable<int> accessionLength, Nullable<bool> useBase36, Nullable<bool> generateAccession, Nullable<bool> printLabel, Nullable<bool> printPatientOnLabel, string symbology, string logoFile, Nullable<bool> isDefault)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var accessionParameter = accession.HasValue ?
                new ObjectParameter("Accession", accession) :
                new ObjectParameter("Accession", typeof(int));
    
            var accessionLengthParameter = accessionLength.HasValue ?
                new ObjectParameter("AccessionLength", accessionLength) :
                new ObjectParameter("AccessionLength", typeof(int));
    
            var useBase36Parameter = useBase36.HasValue ?
                new ObjectParameter("UseBase36", useBase36) :
                new ObjectParameter("UseBase36", typeof(bool));
    
            var generateAccessionParameter = generateAccession.HasValue ?
                new ObjectParameter("GenerateAccession", generateAccession) :
                new ObjectParameter("GenerateAccession", typeof(bool));
    
            var printLabelParameter = printLabel.HasValue ?
                new ObjectParameter("PrintLabel", printLabel) :
                new ObjectParameter("PrintLabel", typeof(bool));
    
            var printPatientOnLabelParameter = printPatientOnLabel.HasValue ?
                new ObjectParameter("PrintPatientOnLabel", printPatientOnLabel) :
                new ObjectParameter("PrintPatientOnLabel", typeof(bool));
    
            var symbologyParameter = symbology != null ?
                new ObjectParameter("Symbology", symbology) :
                new ObjectParameter("Symbology", typeof(string));
    
            var logoFileParameter = logoFile != null ?
                new ObjectParameter("LogoFile", logoFile) :
                new ObjectParameter("LogoFile", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLaboratory", nameParameter, abbreviationParameter, accessionParameter, accessionLengthParameter, useBase36Parameter, generateAccessionParameter, printLabelParameter, printPatientOnLabelParameter, symbologyParameter, logoFileParameter, isDefaultParameter);
        }
    
        public virtual int InsertMethod(string methodTable, string name)
        {
            var methodTableParameter = methodTable != null ?
                new ObjectParameter("MethodTable", methodTable) :
                new ObjectParameter("MethodTable", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMethod", methodTableParameter, nameParameter);
        }
    
        public virtual int InsertMethod2(string methodTable, string name, string displayedName)
        {
            var methodTableParameter = methodTable != null ?
                new ObjectParameter("MethodTable", methodTable) :
                new ObjectParameter("MethodTable", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayedNameParameter = displayedName != null ?
                new ObjectParameter("DisplayedName", displayedName) :
                new ObjectParameter("DisplayedName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMethod2", methodTableParameter, nameParameter, displayedNameParameter);
        }
    
        public virtual int InsertMethod2WithCheck(string methodTable, string name, string displayedName)
        {
            var methodTableParameter = methodTable != null ?
                new ObjectParameter("MethodTable", methodTable) :
                new ObjectParameter("MethodTable", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayedNameParameter = displayedName != null ?
                new ObjectParameter("DisplayedName", displayedName) :
                new ObjectParameter("DisplayedName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMethod2WithCheck", methodTableParameter, nameParameter, displayedNameParameter);
        }
    
        public virtual int InsertMethod3(string methodTable, string name, string className, string displayedName)
        {
            var methodTableParameter = methodTable != null ?
                new ObjectParameter("MethodTable", methodTable) :
                new ObjectParameter("MethodTable", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var displayedNameParameter = displayedName != null ?
                new ObjectParameter("DisplayedName", displayedName) :
                new ObjectParameter("DisplayedName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMethod3", methodTableParameter, nameParameter, classNameParameter, displayedNameParameter);
        }
    
        public virtual int InsertMethod3WithCheck(string methodTable, string name, string className, string displayedName)
        {
            var methodTableParameter = methodTable != null ?
                new ObjectParameter("MethodTable", methodTable) :
                new ObjectParameter("MethodTable", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var displayedNameParameter = displayedName != null ?
                new ObjectParameter("DisplayedName", displayedName) :
                new ObjectParameter("DisplayedName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMethod3WithCheck", methodTableParameter, nameParameter, classNameParameter, displayedNameParameter);
        }
    
        public virtual int InsertMethodAttribute(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMethodAttribute", nameParameter, descriptionParameter);
        }
    
        public virtual int InsertMethodType(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMethodType", nameParameter);
        }
    
        public virtual int InsertOrphanedTarget(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, Nullable<int> genericAppScanLevel, Nullable<int> fieldVisitSequence, byte[] targetLocations)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var fieldVisitSequenceParameter = fieldVisitSequence.HasValue ?
                new ObjectParameter("FieldVisitSequence", fieldVisitSequence) :
                new ObjectParameter("FieldVisitSequence", typeof(int));
    
            var targetLocationsParameter = targetLocations != null ?
                new ObjectParameter("TargetLocations", targetLocations) :
                new ObjectParameter("TargetLocations", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrphanedTarget", slideBarcodeParameter, slideRunStartTimeParameter, genericAppScanLevelParameter, fieldVisitSequenceParameter, targetLocationsParameter);
        }
    
        public virtual int InsertOrphanedTargetChannel(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, string genericAppConfigName, Nullable<int> genericAppScanLevel, Nullable<int> fieldLocationXInMicron, Nullable<int> fieldLocationYInMicron, Nullable<int> fieldVisitSequence, Nullable<int> structureVisitSequence, string structureName, byte[] channelData)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var fieldLocationXInMicronParameter = fieldLocationXInMicron.HasValue ?
                new ObjectParameter("FieldLocationXInMicron", fieldLocationXInMicron) :
                new ObjectParameter("FieldLocationXInMicron", typeof(int));
    
            var fieldLocationYInMicronParameter = fieldLocationYInMicron.HasValue ?
                new ObjectParameter("FieldLocationYInMicron", fieldLocationYInMicron) :
                new ObjectParameter("FieldLocationYInMicron", typeof(int));
    
            var fieldVisitSequenceParameter = fieldVisitSequence.HasValue ?
                new ObjectParameter("FieldVisitSequence", fieldVisitSequence) :
                new ObjectParameter("FieldVisitSequence", typeof(int));
    
            var structureVisitSequenceParameter = structureVisitSequence.HasValue ?
                new ObjectParameter("StructureVisitSequence", structureVisitSequence) :
                new ObjectParameter("StructureVisitSequence", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var channelDataParameter = channelData != null ?
                new ObjectParameter("ChannelData", channelData) :
                new ObjectParameter("ChannelData", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrphanedTargetChannel", slideBarcodeParameter, slideRunStartTimeParameter, genericAppConfigNameParameter, genericAppScanLevelParameter, fieldLocationXInMicronParameter, fieldLocationYInMicronParameter, fieldVisitSequenceParameter, structureVisitSequenceParameter, structureNameParameter, channelDataParameter);
        }
    
        public virtual int InsertOrUpdateMethod(string methodTable, string name, string className, string displayedName, string description)
        {
            var methodTableParameter = methodTable != null ?
                new ObjectParameter("MethodTable", methodTable) :
                new ObjectParameter("MethodTable", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var displayedNameParameter = displayedName != null ?
                new ObjectParameter("DisplayedName", displayedName) :
                new ObjectParameter("DisplayedName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateMethod", methodTableParameter, nameParameter, classNameParameter, displayedNameParameter, descriptionParameter);
        }
    
        public virtual int InsertPatient(string barcode, string firstName, string lastName, Nullable<System.DateTime> dateOfBirth, Nullable<byte> race, Nullable<short> weight, Nullable<short> height, Nullable<short> gestationAge, Nullable<bool> isFetusMale, Nullable<bool> insulinDiabetic, Nullable<bool> highFever, Nullable<short> previousPregnancyCount, Nullable<short> previousBirthCount, Nullable<bool> downSyndromeHistory)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var raceParameter = race.HasValue ?
                new ObjectParameter("Race", race) :
                new ObjectParameter("Race", typeof(byte));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(short));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(short));
    
            var gestationAgeParameter = gestationAge.HasValue ?
                new ObjectParameter("GestationAge", gestationAge) :
                new ObjectParameter("GestationAge", typeof(short));
    
            var isFetusMaleParameter = isFetusMale.HasValue ?
                new ObjectParameter("IsFetusMale", isFetusMale) :
                new ObjectParameter("IsFetusMale", typeof(bool));
    
            var insulinDiabeticParameter = insulinDiabetic.HasValue ?
                new ObjectParameter("InsulinDiabetic", insulinDiabetic) :
                new ObjectParameter("InsulinDiabetic", typeof(bool));
    
            var highFeverParameter = highFever.HasValue ?
                new ObjectParameter("HighFever", highFever) :
                new ObjectParameter("HighFever", typeof(bool));
    
            var previousPregnancyCountParameter = previousPregnancyCount.HasValue ?
                new ObjectParameter("PreviousPregnancyCount", previousPregnancyCount) :
                new ObjectParameter("PreviousPregnancyCount", typeof(short));
    
            var previousBirthCountParameter = previousBirthCount.HasValue ?
                new ObjectParameter("PreviousBirthCount", previousBirthCount) :
                new ObjectParameter("PreviousBirthCount", typeof(short));
    
            var downSyndromeHistoryParameter = downSyndromeHistory.HasValue ?
                new ObjectParameter("DownSyndromeHistory", downSyndromeHistory) :
                new ObjectParameter("DownSyndromeHistory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatient", barcodeParameter, firstNameParameter, lastNameParameter, dateOfBirthParameter, raceParameter, weightParameter, heightParameter, gestationAgeParameter, isFetusMaleParameter, insulinDiabeticParameter, highFeverParameter, previousPregnancyCountParameter, previousBirthCountParameter, downSyndromeHistoryParameter);
        }
    
        public virtual int InsertReport(string name, Nullable<bool> showSignatureAndTestOutcome)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var showSignatureAndTestOutcomeParameter = showSignatureAndTestOutcome.HasValue ?
                new ObjectParameter("ShowSignatureAndTestOutcome", showSignatureAndTestOutcome) :
                new ObjectParameter("ShowSignatureAndTestOutcome", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReport", nameParameter, showSignatureAndTestOutcomeParameter);
        }
    
        public virtual int InsertReportElement(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReportElement", nameParameter, descriptionParameter);
        }
    
        public virtual int InsertReportSection(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReportSection", nameParameter, descriptionParameter);
        }
    
        public virtual int InsertReviewedDotCount(string userLoginID, string studyName, Nullable<int> studyTargetSequence, string structureName, Nullable<int> dotCount)
        {
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var studyNameParameter = studyName != null ?
                new ObjectParameter("StudyName", studyName) :
                new ObjectParameter("StudyName", typeof(string));
    
            var studyTargetSequenceParameter = studyTargetSequence.HasValue ?
                new ObjectParameter("StudyTargetSequence", studyTargetSequence) :
                new ObjectParameter("StudyTargetSequence", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var dotCountParameter = dotCount.HasValue ?
                new ObjectParameter("DotCount", dotCount) :
                new ObjectParameter("DotCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReviewedDotCount", userLoginIDParameter, studyNameParameter, studyTargetSequenceParameter, structureNameParameter, dotCountParameter);
        }
    
        public virtual int InsertReviewedTarget(string userLoginID, string studyName, Nullable<int> studyTargetSequence, string targetClassificationName)
        {
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var studyNameParameter = studyName != null ?
                new ObjectParameter("StudyName", studyName) :
                new ObjectParameter("StudyName", typeof(string));
    
            var studyTargetSequenceParameter = studyTargetSequence.HasValue ?
                new ObjectParameter("StudyTargetSequence", studyTargetSequence) :
                new ObjectParameter("StudyTargetSequence", typeof(int));
    
            var targetClassificationNameParameter = targetClassificationName != null ?
                new ObjectParameter("TargetClassificationName", targetClassificationName) :
                new ObjectParameter("TargetClassificationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReviewedTarget", userLoginIDParameter, studyNameParameter, studyTargetSequenceParameter, targetClassificationNameParameter);
        }
    
        public virtual int InsertSample(string barcode, string description)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSample", barcodeParameter, descriptionParameter);
        }
    
        public virtual int InsertScanner(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertScanner", nameParameter);
        }
    
        public virtual int InsertScannerWithCheck(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertScannerWithCheck", nameParameter);
        }
    
        public virtual int InsertSlide(string barcode, Nullable<System.DateTime> timePrepared, string patientBarcode, string cassetteBarcode, string userLoginID, string slideTypeName)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var timePreparedParameter = timePrepared.HasValue ?
                new ObjectParameter("TimePrepared", timePrepared) :
                new ObjectParameter("TimePrepared", typeof(System.DateTime));
    
            var patientBarcodeParameter = patientBarcode != null ?
                new ObjectParameter("PatientBarcode", patientBarcode) :
                new ObjectParameter("PatientBarcode", typeof(string));
    
            var cassetteBarcodeParameter = cassetteBarcode != null ?
                new ObjectParameter("CassetteBarcode", cassetteBarcode) :
                new ObjectParameter("CassetteBarcode", typeof(string));
    
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var slideTypeNameParameter = slideTypeName != null ?
                new ObjectParameter("SlideTypeName", slideTypeName) :
                new ObjectParameter("SlideTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlide", barcodeParameter, timePreparedParameter, patientBarcodeParameter, cassetteBarcodeParameter, userLoginIDParameter, slideTypeNameParameter);
        }
    
        public virtual int InsertSlideArea(string name, string description, string reference)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideArea", nameParameter, descriptionParameter, referenceParameter);
        }
    
        public virtual int InsertSlideAttribute(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideAttribute", nameParameter, descriptionParameter);
        }
    
        public virtual int InsertSlideAttributeValue(string slideBarcode, string name, string value)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideAttributeValue", slideBarcodeParameter, nameParameter, valueParameter);
        }
    
        public virtual int InsertSlideBrightField(string barcode, Nullable<System.DateTime> timePrepared, string patientBarcode, string userLoginID, string slideTypeName, Nullable<bool> isBrightField)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var timePreparedParameter = timePrepared.HasValue ?
                new ObjectParameter("TimePrepared", timePrepared) :
                new ObjectParameter("TimePrepared", typeof(System.DateTime));
    
            var patientBarcodeParameter = patientBarcode != null ?
                new ObjectParameter("PatientBarcode", patientBarcode) :
                new ObjectParameter("PatientBarcode", typeof(string));
    
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var slideTypeNameParameter = slideTypeName != null ?
                new ObjectParameter("SlideTypeName", slideTypeName) :
                new ObjectParameter("SlideTypeName", typeof(string));
    
            var isBrightFieldParameter = isBrightField.HasValue ?
                new ObjectParameter("IsBrightField", isBrightField) :
                new ObjectParameter("IsBrightField", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideBrightField", barcodeParameter, timePreparedParameter, patientBarcodeParameter, userLoginIDParameter, slideTypeNameParameter, isBrightFieldParameter);
        }
    
        public virtual int InsertSlideRun(string slideBarcode, string slideAreaName, string imageLocationName, string scannerName, string userLoginID, Nullable<System.DateTime> startTime, Nullable<int> durationInSeconds, string testOutcome, Nullable<int> lampHoursStart, Nullable<int> lampHoursEnd, string slideTypeName, Nullable<int> visitSequence, Nullable<bool> isManual, Nullable<int> formatVersion)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideAreaNameParameter = slideAreaName != null ?
                new ObjectParameter("SlideAreaName", slideAreaName) :
                new ObjectParameter("SlideAreaName", typeof(string));
    
            var imageLocationNameParameter = imageLocationName != null ?
                new ObjectParameter("ImageLocationName", imageLocationName) :
                new ObjectParameter("ImageLocationName", typeof(string));
    
            var scannerNameParameter = scannerName != null ?
                new ObjectParameter("ScannerName", scannerName) :
                new ObjectParameter("ScannerName", typeof(string));
    
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var durationInSecondsParameter = durationInSeconds.HasValue ?
                new ObjectParameter("DurationInSeconds", durationInSeconds) :
                new ObjectParameter("DurationInSeconds", typeof(int));
    
            var testOutcomeParameter = testOutcome != null ?
                new ObjectParameter("TestOutcome", testOutcome) :
                new ObjectParameter("TestOutcome", typeof(string));
    
            var lampHoursStartParameter = lampHoursStart.HasValue ?
                new ObjectParameter("LampHoursStart", lampHoursStart) :
                new ObjectParameter("LampHoursStart", typeof(int));
    
            var lampHoursEndParameter = lampHoursEnd.HasValue ?
                new ObjectParameter("LampHoursEnd", lampHoursEnd) :
                new ObjectParameter("LampHoursEnd", typeof(int));
    
            var slideTypeNameParameter = slideTypeName != null ?
                new ObjectParameter("SlideTypeName", slideTypeName) :
                new ObjectParameter("SlideTypeName", typeof(string));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var formatVersionParameter = formatVersion.HasValue ?
                new ObjectParameter("FormatVersion", formatVersion) :
                new ObjectParameter("FormatVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideRun", slideBarcodeParameter, slideAreaNameParameter, imageLocationNameParameter, scannerNameParameter, userLoginIDParameter, startTimeParameter, durationInSecondsParameter, testOutcomeParameter, lampHoursStartParameter, lampHoursEndParameter, slideTypeNameParameter, visitSequenceParameter, isManualParameter, formatVersionParameter);
        }
    
        public virtual int InsertSlideRunAppScan(string slideBarcode, Nullable<System.DateTime> startTime, string genericAppName, Nullable<int> genericAppScanLevel, Nullable<int> durationInSeconds, Nullable<float> pixelSizeInMicronX, Nullable<float> pixelSizeInMicronY, Nullable<float> fieldSizeInMicronX, Nullable<float> fieldSizeInMicronY, Nullable<int> numberOfNuclei, Nullable<int> numberOfTargets, Nullable<float> targetDensityPerSquareMillimeter, Nullable<bool> generateTargetImages)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var genericAppNameParameter = genericAppName != null ?
                new ObjectParameter("GenericAppName", genericAppName) :
                new ObjectParameter("GenericAppName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var durationInSecondsParameter = durationInSeconds.HasValue ?
                new ObjectParameter("DurationInSeconds", durationInSeconds) :
                new ObjectParameter("DurationInSeconds", typeof(int));
    
            var pixelSizeInMicronXParameter = pixelSizeInMicronX.HasValue ?
                new ObjectParameter("PixelSizeInMicronX", pixelSizeInMicronX) :
                new ObjectParameter("PixelSizeInMicronX", typeof(float));
    
            var pixelSizeInMicronYParameter = pixelSizeInMicronY.HasValue ?
                new ObjectParameter("PixelSizeInMicronY", pixelSizeInMicronY) :
                new ObjectParameter("PixelSizeInMicronY", typeof(float));
    
            var fieldSizeInMicronXParameter = fieldSizeInMicronX.HasValue ?
                new ObjectParameter("FieldSizeInMicronX", fieldSizeInMicronX) :
                new ObjectParameter("FieldSizeInMicronX", typeof(float));
    
            var fieldSizeInMicronYParameter = fieldSizeInMicronY.HasValue ?
                new ObjectParameter("FieldSizeInMicronY", fieldSizeInMicronY) :
                new ObjectParameter("FieldSizeInMicronY", typeof(float));
    
            var numberOfNucleiParameter = numberOfNuclei.HasValue ?
                new ObjectParameter("NumberOfNuclei", numberOfNuclei) :
                new ObjectParameter("NumberOfNuclei", typeof(int));
    
            var numberOfTargetsParameter = numberOfTargets.HasValue ?
                new ObjectParameter("NumberOfTargets", numberOfTargets) :
                new ObjectParameter("NumberOfTargets", typeof(int));
    
            var targetDensityPerSquareMillimeterParameter = targetDensityPerSquareMillimeter.HasValue ?
                new ObjectParameter("TargetDensityPerSquareMillimeter", targetDensityPerSquareMillimeter) :
                new ObjectParameter("TargetDensityPerSquareMillimeter", typeof(float));
    
            var generateTargetImagesParameter = generateTargetImages.HasValue ?
                new ObjectParameter("GenerateTargetImages", generateTargetImages) :
                new ObjectParameter("GenerateTargetImages", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideRunAppScan", slideBarcodeParameter, startTimeParameter, genericAppNameParameter, genericAppScanLevelParameter, durationInSecondsParameter, pixelSizeInMicronXParameter, pixelSizeInMicronYParameter, fieldSizeInMicronXParameter, fieldSizeInMicronYParameter, numberOfNucleiParameter, numberOfTargetsParameter, targetDensityPerSquareMillimeterParameter, generateTargetImagesParameter);
        }
    
        public virtual int InsertSlideRunBrightField(string slideBarcode, string imageLocationName, Nullable<System.DateTime> startTime, Nullable<float> pixelSizeInMicron, Nullable<bool> isDefault)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var imageLocationNameParameter = imageLocationName != null ?
                new ObjectParameter("ImageLocationName", imageLocationName) :
                new ObjectParameter("ImageLocationName", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var pixelSizeInMicronParameter = pixelSizeInMicron.HasValue ?
                new ObjectParameter("PixelSizeInMicron", pixelSizeInMicron) :
                new ObjectParameter("PixelSizeInMicron", typeof(float));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideRunBrightField", slideBarcodeParameter, imageLocationNameParameter, startTimeParameter, pixelSizeInMicronParameter, isDefaultParameter);
        }
    
        public virtual int InsertSlideRunBrightFieldAssociation(string barcode, Nullable<System.DateTime> startTime, string barcodeBrightField, Nullable<System.DateTime> startTimeBrightField, Nullable<int> offsetXInMicron, Nullable<int> offsetYInMicron, Nullable<float> rotationInDegree, Nullable<bool> flipped, Nullable<float> confidence, Nullable<int> visitSequence)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var barcodeBrightFieldParameter = barcodeBrightField != null ?
                new ObjectParameter("BarcodeBrightField", barcodeBrightField) :
                new ObjectParameter("BarcodeBrightField", typeof(string));
    
            var startTimeBrightFieldParameter = startTimeBrightField.HasValue ?
                new ObjectParameter("StartTimeBrightField", startTimeBrightField) :
                new ObjectParameter("StartTimeBrightField", typeof(System.DateTime));
    
            var offsetXInMicronParameter = offsetXInMicron.HasValue ?
                new ObjectParameter("OffsetXInMicron", offsetXInMicron) :
                new ObjectParameter("OffsetXInMicron", typeof(int));
    
            var offsetYInMicronParameter = offsetYInMicron.HasValue ?
                new ObjectParameter("OffsetYInMicron", offsetYInMicron) :
                new ObjectParameter("OffsetYInMicron", typeof(int));
    
            var rotationInDegreeParameter = rotationInDegree.HasValue ?
                new ObjectParameter("RotationInDegree", rotationInDegree) :
                new ObjectParameter("RotationInDegree", typeof(float));
    
            var flippedParameter = flipped.HasValue ?
                new ObjectParameter("Flipped", flipped) :
                new ObjectParameter("Flipped", typeof(bool));
    
            var confidenceParameter = confidence.HasValue ?
                new ObjectParameter("Confidence", confidence) :
                new ObjectParameter("Confidence", typeof(float));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideRunBrightFieldAssociation", barcodeParameter, startTimeParameter, barcodeBrightFieldParameter, startTimeBrightFieldParameter, offsetXInMicronParameter, offsetYInMicronParameter, rotationInDegreeParameter, flippedParameter, confidenceParameter, visitSequenceParameter);
        }
    
        public virtual int InsertSlideRunInDefaultLocation(string slideBarcode, string slideAreaName, string scannerName, string userLoginID, Nullable<System.DateTime> startTime, Nullable<int> durationInSeconds, string testOutcome, Nullable<int> lampHoursStart, Nullable<int> lampHoursEnd, string slideTypeName, Nullable<int> visitSequence, Nullable<bool> isManual, Nullable<int> formatVersion)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideAreaNameParameter = slideAreaName != null ?
                new ObjectParameter("SlideAreaName", slideAreaName) :
                new ObjectParameter("SlideAreaName", typeof(string));
    
            var scannerNameParameter = scannerName != null ?
                new ObjectParameter("ScannerName", scannerName) :
                new ObjectParameter("ScannerName", typeof(string));
    
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var durationInSecondsParameter = durationInSeconds.HasValue ?
                new ObjectParameter("DurationInSeconds", durationInSeconds) :
                new ObjectParameter("DurationInSeconds", typeof(int));
    
            var testOutcomeParameter = testOutcome != null ?
                new ObjectParameter("TestOutcome", testOutcome) :
                new ObjectParameter("TestOutcome", typeof(string));
    
            var lampHoursStartParameter = lampHoursStart.HasValue ?
                new ObjectParameter("LampHoursStart", lampHoursStart) :
                new ObjectParameter("LampHoursStart", typeof(int));
    
            var lampHoursEndParameter = lampHoursEnd.HasValue ?
                new ObjectParameter("LampHoursEnd", lampHoursEnd) :
                new ObjectParameter("LampHoursEnd", typeof(int));
    
            var slideTypeNameParameter = slideTypeName != null ?
                new ObjectParameter("SlideTypeName", slideTypeName) :
                new ObjectParameter("SlideTypeName", typeof(string));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var formatVersionParameter = formatVersion.HasValue ?
                new ObjectParameter("FormatVersion", formatVersion) :
                new ObjectParameter("FormatVersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideRunInDefaultLocation", slideBarcodeParameter, slideAreaNameParameter, scannerNameParameter, userLoginIDParameter, startTimeParameter, durationInSecondsParameter, testOutcomeParameter, lampHoursStartParameter, lampHoursEndParameter, slideTypeNameParameter, visitSequenceParameter, isManualParameter, formatVersionParameter);
        }
    
        public virtual int InsertSlideStatus(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideStatus", nameParameter, descriptionParameter);
        }
    
        public virtual int InsertSlideType(string name, string description, Nullable<bool> allowEdit)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var allowEditParameter = allowEdit.HasValue ?
                new ObjectParameter("AllowEdit", allowEdit) :
                new ObjectParameter("AllowEdit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideType", nameParameter, descriptionParameter, allowEditParameter);
        }
    
        public virtual int InsertSlideTypeAssociation(string slideTypeName, string depositionAreaName, string genericAppConfigName, Nullable<int> visitSequence)
        {
            var slideTypeNameParameter = slideTypeName != null ?
                new ObjectParameter("SlideTypeName", slideTypeName) :
                new ObjectParameter("SlideTypeName", typeof(string));
    
            var depositionAreaNameParameter = depositionAreaName != null ?
                new ObjectParameter("DepositionAreaName", depositionAreaName) :
                new ObjectParameter("DepositionAreaName", typeof(string));
    
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var visitSequenceParameter = visitSequence.HasValue ?
                new ObjectParameter("VisitSequence", visitSequence) :
                new ObjectParameter("VisitSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSlideTypeAssociation", slideTypeNameParameter, depositionAreaNameParameter, genericAppConfigNameParameter, visitSequenceParameter);
        }
    
        public virtual int InsertStatistics(string slideBarcode, Nullable<System.DateTime> startTime, string genericAppName, Nullable<int> genericAppScanLevel, string statisticsName, string statisticsValue)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var genericAppNameParameter = genericAppName != null ?
                new ObjectParameter("GenericAppName", genericAppName) :
                new ObjectParameter("GenericAppName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var statisticsNameParameter = statisticsName != null ?
                new ObjectParameter("StatisticsName", statisticsName) :
                new ObjectParameter("StatisticsName", typeof(string));
    
            var statisticsValueParameter = statisticsValue != null ?
                new ObjectParameter("StatisticsValue", statisticsValue) :
                new ObjectParameter("StatisticsValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStatistics", slideBarcodeParameter, startTimeParameter, genericAppNameParameter, genericAppScanLevelParameter, statisticsNameParameter, statisticsValueParameter);
        }
    
        public virtual int InsertStructure(string name, string description, string abbreviation, Nullable<int> category)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStructure", nameParameter, descriptionParameter, abbreviationParameter, categoryParameter);
        }
    
        public virtual int InsertStudy(string name, string genericAppConfigName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudy", nameParameter, genericAppConfigNameParameter);
        }
    
        public virtual int InsertStudySlideRun(string studyName, string slideBarcode, Nullable<System.DateTime> startTime)
        {
            var studyNameParameter = studyName != null ?
                new ObjectParameter("StudyName", studyName) :
                new ObjectParameter("StudyName", typeof(string));
    
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudySlideRun", studyNameParameter, slideBarcodeParameter, startTimeParameter);
        }
    
        public virtual int InsertStudyTarget(string studyName, string slideBarcode, Nullable<System.DateTime> startTime, Nullable<int> scanLevel, Nullable<int> fieldVisitSequence, Nullable<int> targetRegisteredSequence, Nullable<int> studyTargetSequence)
        {
            var studyNameParameter = studyName != null ?
                new ObjectParameter("StudyName", studyName) :
                new ObjectParameter("StudyName", typeof(string));
    
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var scanLevelParameter = scanLevel.HasValue ?
                new ObjectParameter("ScanLevel", scanLevel) :
                new ObjectParameter("ScanLevel", typeof(int));
    
            var fieldVisitSequenceParameter = fieldVisitSequence.HasValue ?
                new ObjectParameter("FieldVisitSequence", fieldVisitSequence) :
                new ObjectParameter("FieldVisitSequence", typeof(int));
    
            var targetRegisteredSequenceParameter = targetRegisteredSequence.HasValue ?
                new ObjectParameter("TargetRegisteredSequence", targetRegisteredSequence) :
                new ObjectParameter("TargetRegisteredSequence", typeof(int));
    
            var studyTargetSequenceParameter = studyTargetSequence.HasValue ?
                new ObjectParameter("StudyTargetSequence", studyTargetSequence) :
                new ObjectParameter("StudyTargetSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudyTarget", studyNameParameter, slideBarcodeParameter, startTimeParameter, scanLevelParameter, fieldVisitSequenceParameter, targetRegisteredSequenceParameter, studyTargetSequenceParameter);
        }
    
        public virtual int InsertStudyUser(string userLoginID, string studyName)
        {
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var studyNameParameter = studyName != null ?
                new ObjectParameter("StudyName", studyName) :
                new ObjectParameter("StudyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudyUser", userLoginIDParameter, studyNameParameter);
        }
    
        public virtual int InsertTarget(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, Nullable<int> genericAppScanLevel, Nullable<int> fieldVisitSequence, Nullable<int> targetLocationXInPixel, Nullable<int> targetLocationYInPixel, Nullable<int> parentAppScanLevel, Nullable<int> parentFieldVisitSequence, Nullable<int> parentRegisteredSequence, Nullable<int> registeredSequence, string targetClassificationSetName, string targetClassificationName, string targetReviewStatusName, Nullable<int> fusionCount, Nullable<int> nuclearSize)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var fieldVisitSequenceParameter = fieldVisitSequence.HasValue ?
                new ObjectParameter("FieldVisitSequence", fieldVisitSequence) :
                new ObjectParameter("FieldVisitSequence", typeof(int));
    
            var targetLocationXInPixelParameter = targetLocationXInPixel.HasValue ?
                new ObjectParameter("TargetLocationXInPixel", targetLocationXInPixel) :
                new ObjectParameter("TargetLocationXInPixel", typeof(int));
    
            var targetLocationYInPixelParameter = targetLocationYInPixel.HasValue ?
                new ObjectParameter("TargetLocationYInPixel", targetLocationYInPixel) :
                new ObjectParameter("TargetLocationYInPixel", typeof(int));
    
            var parentAppScanLevelParameter = parentAppScanLevel.HasValue ?
                new ObjectParameter("ParentAppScanLevel", parentAppScanLevel) :
                new ObjectParameter("ParentAppScanLevel", typeof(int));
    
            var parentFieldVisitSequenceParameter = parentFieldVisitSequence.HasValue ?
                new ObjectParameter("ParentFieldVisitSequence", parentFieldVisitSequence) :
                new ObjectParameter("ParentFieldVisitSequence", typeof(int));
    
            var parentRegisteredSequenceParameter = parentRegisteredSequence.HasValue ?
                new ObjectParameter("ParentRegisteredSequence", parentRegisteredSequence) :
                new ObjectParameter("ParentRegisteredSequence", typeof(int));
    
            var registeredSequenceParameter = registeredSequence.HasValue ?
                new ObjectParameter("RegisteredSequence", registeredSequence) :
                new ObjectParameter("RegisteredSequence", typeof(int));
    
            var targetClassificationSetNameParameter = targetClassificationSetName != null ?
                new ObjectParameter("TargetClassificationSetName", targetClassificationSetName) :
                new ObjectParameter("TargetClassificationSetName", typeof(string));
    
            var targetClassificationNameParameter = targetClassificationName != null ?
                new ObjectParameter("TargetClassificationName", targetClassificationName) :
                new ObjectParameter("TargetClassificationName", typeof(string));
    
            var targetReviewStatusNameParameter = targetReviewStatusName != null ?
                new ObjectParameter("TargetReviewStatusName", targetReviewStatusName) :
                new ObjectParameter("TargetReviewStatusName", typeof(string));
    
            var fusionCountParameter = fusionCount.HasValue ?
                new ObjectParameter("FusionCount", fusionCount) :
                new ObjectParameter("FusionCount", typeof(int));
    
            var nuclearSizeParameter = nuclearSize.HasValue ?
                new ObjectParameter("NuclearSize", nuclearSize) :
                new ObjectParameter("NuclearSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTarget", slideBarcodeParameter, slideRunStartTimeParameter, genericAppScanLevelParameter, fieldVisitSequenceParameter, targetLocationXInPixelParameter, targetLocationYInPixelParameter, parentAppScanLevelParameter, parentFieldVisitSequenceParameter, parentRegisteredSequenceParameter, registeredSequenceParameter, targetClassificationSetNameParameter, targetClassificationNameParameter, targetReviewStatusNameParameter, fusionCountParameter, nuclearSizeParameter);
        }
    
        public virtual int InsertTargetChannel(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, string genericAppConfigName, Nullable<int> genericAppScanLevel, Nullable<int> fieldLocationXInMicron, Nullable<int> fieldLocationYInMicron, Nullable<int> fieldVisitSequence, Nullable<int> targetLocationXInPixel, Nullable<int> targetLocationYInPixel, Nullable<int> targetRegisteredSequence, Nullable<int> structureVisitSequence, string structureName, Nullable<int> bestFocusedPlane, Nullable<int> dotCount, Nullable<bool> confidentOfCount)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var fieldLocationXInMicronParameter = fieldLocationXInMicron.HasValue ?
                new ObjectParameter("FieldLocationXInMicron", fieldLocationXInMicron) :
                new ObjectParameter("FieldLocationXInMicron", typeof(int));
    
            var fieldLocationYInMicronParameter = fieldLocationYInMicron.HasValue ?
                new ObjectParameter("FieldLocationYInMicron", fieldLocationYInMicron) :
                new ObjectParameter("FieldLocationYInMicron", typeof(int));
    
            var fieldVisitSequenceParameter = fieldVisitSequence.HasValue ?
                new ObjectParameter("FieldVisitSequence", fieldVisitSequence) :
                new ObjectParameter("FieldVisitSequence", typeof(int));
    
            var targetLocationXInPixelParameter = targetLocationXInPixel.HasValue ?
                new ObjectParameter("TargetLocationXInPixel", targetLocationXInPixel) :
                new ObjectParameter("TargetLocationXInPixel", typeof(int));
    
            var targetLocationYInPixelParameter = targetLocationYInPixel.HasValue ?
                new ObjectParameter("TargetLocationYInPixel", targetLocationYInPixel) :
                new ObjectParameter("TargetLocationYInPixel", typeof(int));
    
            var targetRegisteredSequenceParameter = targetRegisteredSequence.HasValue ?
                new ObjectParameter("TargetRegisteredSequence", targetRegisteredSequence) :
                new ObjectParameter("TargetRegisteredSequence", typeof(int));
    
            var structureVisitSequenceParameter = structureVisitSequence.HasValue ?
                new ObjectParameter("StructureVisitSequence", structureVisitSequence) :
                new ObjectParameter("StructureVisitSequence", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var bestFocusedPlaneParameter = bestFocusedPlane.HasValue ?
                new ObjectParameter("BestFocusedPlane", bestFocusedPlane) :
                new ObjectParameter("BestFocusedPlane", typeof(int));
    
            var dotCountParameter = dotCount.HasValue ?
                new ObjectParameter("DotCount", dotCount) :
                new ObjectParameter("DotCount", typeof(int));
    
            var confidentOfCountParameter = confidentOfCount.HasValue ?
                new ObjectParameter("ConfidentOfCount", confidentOfCount) :
                new ObjectParameter("ConfidentOfCount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTargetChannel", slideBarcodeParameter, slideRunStartTimeParameter, genericAppConfigNameParameter, genericAppScanLevelParameter, fieldLocationXInMicronParameter, fieldLocationYInMicronParameter, fieldVisitSequenceParameter, targetLocationXInPixelParameter, targetLocationYInPixelParameter, targetRegisteredSequenceParameter, structureVisitSequenceParameter, structureNameParameter, bestFocusedPlaneParameter, dotCountParameter, confidentOfCountParameter);
        }
    
        public virtual int InsertTargetChannel2(string slideBarcode, Nullable<System.DateTime> slideRunStartTime, string genericAppConfigName, Nullable<int> genericAppScanLevel, Nullable<int> fieldLocationXInMicron, Nullable<int> fieldLocationYInMicron, Nullable<int> fieldVisitSequence, Nullable<int> targetLocationXInPixel, Nullable<int> targetLocationYInPixel, Nullable<int> targetRegisteredSequence, Nullable<int> structureVisitSequence, string structureName, Nullable<int> bestFocusedPlane, Nullable<int> dotCount, Nullable<bool> confidentOfCount, Nullable<float> positivity, string clouds)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideRunStartTimeParameter = slideRunStartTime.HasValue ?
                new ObjectParameter("SlideRunStartTime", slideRunStartTime) :
                new ObjectParameter("SlideRunStartTime", typeof(System.DateTime));
    
            var genericAppConfigNameParameter = genericAppConfigName != null ?
                new ObjectParameter("GenericAppConfigName", genericAppConfigName) :
                new ObjectParameter("GenericAppConfigName", typeof(string));
    
            var genericAppScanLevelParameter = genericAppScanLevel.HasValue ?
                new ObjectParameter("GenericAppScanLevel", genericAppScanLevel) :
                new ObjectParameter("GenericAppScanLevel", typeof(int));
    
            var fieldLocationXInMicronParameter = fieldLocationXInMicron.HasValue ?
                new ObjectParameter("FieldLocationXInMicron", fieldLocationXInMicron) :
                new ObjectParameter("FieldLocationXInMicron", typeof(int));
    
            var fieldLocationYInMicronParameter = fieldLocationYInMicron.HasValue ?
                new ObjectParameter("FieldLocationYInMicron", fieldLocationYInMicron) :
                new ObjectParameter("FieldLocationYInMicron", typeof(int));
    
            var fieldVisitSequenceParameter = fieldVisitSequence.HasValue ?
                new ObjectParameter("FieldVisitSequence", fieldVisitSequence) :
                new ObjectParameter("FieldVisitSequence", typeof(int));
    
            var targetLocationXInPixelParameter = targetLocationXInPixel.HasValue ?
                new ObjectParameter("TargetLocationXInPixel", targetLocationXInPixel) :
                new ObjectParameter("TargetLocationXInPixel", typeof(int));
    
            var targetLocationYInPixelParameter = targetLocationYInPixel.HasValue ?
                new ObjectParameter("TargetLocationYInPixel", targetLocationYInPixel) :
                new ObjectParameter("TargetLocationYInPixel", typeof(int));
    
            var targetRegisteredSequenceParameter = targetRegisteredSequence.HasValue ?
                new ObjectParameter("TargetRegisteredSequence", targetRegisteredSequence) :
                new ObjectParameter("TargetRegisteredSequence", typeof(int));
    
            var structureVisitSequenceParameter = structureVisitSequence.HasValue ?
                new ObjectParameter("StructureVisitSequence", structureVisitSequence) :
                new ObjectParameter("StructureVisitSequence", typeof(int));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("StructureName", structureName) :
                new ObjectParameter("StructureName", typeof(string));
    
            var bestFocusedPlaneParameter = bestFocusedPlane.HasValue ?
                new ObjectParameter("BestFocusedPlane", bestFocusedPlane) :
                new ObjectParameter("BestFocusedPlane", typeof(int));
    
            var dotCountParameter = dotCount.HasValue ?
                new ObjectParameter("DotCount", dotCount) :
                new ObjectParameter("DotCount", typeof(int));
    
            var confidentOfCountParameter = confidentOfCount.HasValue ?
                new ObjectParameter("ConfidentOfCount", confidentOfCount) :
                new ObjectParameter("ConfidentOfCount", typeof(bool));
    
            var positivityParameter = positivity.HasValue ?
                new ObjectParameter("Positivity", positivity) :
                new ObjectParameter("Positivity", typeof(float));
    
            var cloudsParameter = clouds != null ?
                new ObjectParameter("Clouds", clouds) :
                new ObjectParameter("Clouds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTargetChannel2", slideBarcodeParameter, slideRunStartTimeParameter, genericAppConfigNameParameter, genericAppScanLevelParameter, fieldLocationXInMicronParameter, fieldLocationYInMicronParameter, fieldVisitSequenceParameter, targetLocationXInPixelParameter, targetLocationYInPixelParameter, targetRegisteredSequenceParameter, structureVisitSequenceParameter, structureNameParameter, bestFocusedPlaneParameter, dotCountParameter, confidentOfCountParameter, positivityParameter, cloudsParameter);
        }
    
        public virtual int InsertTargetClassification(string targetClassificationSetName, string name, string description, string abbreviation, Nullable<int> sortSequence, Nullable<bool> isDefault)
        {
            var targetClassificationSetNameParameter = targetClassificationSetName != null ?
                new ObjectParameter("TargetClassificationSetName", targetClassificationSetName) :
                new ObjectParameter("TargetClassificationSetName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var sortSequenceParameter = sortSequence.HasValue ?
                new ObjectParameter("SortSequence", sortSequence) :
                new ObjectParameter("SortSequence", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTargetClassification", targetClassificationSetNameParameter, nameParameter, descriptionParameter, abbreviationParameter, sortSequenceParameter, isDefaultParameter);
        }
    
        public virtual int InsertTargetClassification2(string targetClassificationSetName, string name, string description, string abbreviation, Nullable<int> sortSequence, string rule, Nullable<int> ruleSequence, Nullable<bool> isDefault)
        {
            var targetClassificationSetNameParameter = targetClassificationSetName != null ?
                new ObjectParameter("TargetClassificationSetName", targetClassificationSetName) :
                new ObjectParameter("TargetClassificationSetName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var sortSequenceParameter = sortSequence.HasValue ?
                new ObjectParameter("SortSequence", sortSequence) :
                new ObjectParameter("SortSequence", typeof(int));
    
            var ruleParameter = rule != null ?
                new ObjectParameter("Rule", rule) :
                new ObjectParameter("Rule", typeof(string));
    
            var ruleSequenceParameter = ruleSequence.HasValue ?
                new ObjectParameter("RuleSequence", ruleSequence) :
                new ObjectParameter("RuleSequence", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTargetClassification2", targetClassificationSetNameParameter, nameParameter, descriptionParameter, abbreviationParameter, sortSequenceParameter, ruleParameter, ruleSequenceParameter, isDefaultParameter);
        }
    
        public virtual int InsertTargetClassificationSet(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTargetClassificationSet", nameParameter, descriptionParameter);
        }
    
        public virtual int InsertTargetReviewStatus(string name, string description, string abbreviation)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTargetReviewStatus", nameParameter, descriptionParameter, abbreviationParameter);
        }
    
        public virtual int InsertUser(string loginID, byte[] password, Nullable<int> level, string firstName, string lastName)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(byte[]));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", loginIDParameter, passwordParameter, levelParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int MultiTargetUpdate(string targetIDs, Nullable<int> targetClassificationID, Nullable<int> targetReviewStatusID)
        {
            var targetIDsParameter = targetIDs != null ?
                new ObjectParameter("targetIDs", targetIDs) :
                new ObjectParameter("targetIDs", typeof(string));
    
            var targetClassificationIDParameter = targetClassificationID.HasValue ?
                new ObjectParameter("targetClassificationID", targetClassificationID) :
                new ObjectParameter("targetClassificationID", typeof(int));
    
            var targetReviewStatusIDParameter = targetReviewStatusID.HasValue ?
                new ObjectParameter("targetReviewStatusID", targetReviewStatusID) :
                new ObjectParameter("targetReviewStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MultiTargetUpdate", targetIDsParameter, targetClassificationIDParameter, targetReviewStatusIDParameter);
        }
    
        public virtual int SetSlideAttributeValue(Nullable<int> slideID, Nullable<int> attributeID, string value)
        {
            var slideIDParameter = slideID.HasValue ?
                new ObjectParameter("SlideID", slideID) :
                new ObjectParameter("SlideID", typeof(int));
    
            var attributeIDParameter = attributeID.HasValue ?
                new ObjectParameter("AttributeID", attributeID) :
                new ObjectParameter("AttributeID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetSlideAttributeValue", slideIDParameter, attributeIDParameter, valueParameter);
        }
    
        public virtual int SlideRunBrightFieldClearDefault(string slideBarcode)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SlideRunBrightFieldClearDefault", slideBarcodeParameter);
        }
    
        public virtual int SP_AddIkoGroup(string name, string description, string contactPerson, string contactEmail, string contactPhone, string notes, string createdBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddIkoGroup", nameParameter, descriptionParameter, contactPersonParameter, contactEmailParameter, contactPhoneParameter, notesParameter, createdByParameter);
        }
    
        public virtual int SP_AddIkoUser(string loginID, byte[] password, string firstName, string lastName, string middleName, string emailAddress, Nullable<System.DateTime> expireDate, Nullable<bool> neverExpire, Nullable<bool> disabled, Nullable<long> userRole, string createdBy)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(byte[]));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(System.DateTime));
    
            var neverExpireParameter = neverExpire.HasValue ?
                new ObjectParameter("NeverExpire", neverExpire) :
                new ObjectParameter("NeverExpire", typeof(bool));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(bool));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(long));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddIkoUser", loginIDParameter, passwordParameter, firstNameParameter, lastNameParameter, middleNameParameter, emailAddressParameter, expireDateParameter, neverExpireParameter, disabledParameter, userRoleParameter, createdByParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_ChangeSlideGroup(string barCode, string group, string lastUpdateBy)
        {
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var groupParameter = group != null ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ChangeSlideGroup", barCodeParameter, groupParameter, lastUpdateByParameter);
        }
    
        public virtual ObjectResult<string> SP_CP_Login(string loginID, byte[] password)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CP_Login", loginIDParameter, passwordParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_DeleteGenericApp(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteGenericApp", idParameter);
        }
    
        public virtual ObjectResult<string> SP_DeleteIkoGroup(string ikoGroupID)
        {
            var ikoGroupIDParameter = ikoGroupID != null ?
                new ObjectParameter("IkoGroupID", ikoGroupID) :
                new ObjectParameter("IkoGroupID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_DeleteIkoGroup", ikoGroupIDParameter);
        }
    
        public virtual int SP_DeleteIkoUser(string loginID)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteIkoUser", loginIDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_EditIkoGroup(string name, string description, string contactPerson, string contactEmail, string contactPhone, string notes, string lastUpdateBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditIkoGroup", nameParameter, descriptionParameter, contactPersonParameter, contactEmailParameter, contactPhoneParameter, notesParameter, lastUpdateByParameter);
        }
    
        public virtual int SP_EditIkoUser(string loginID, Nullable<int> resetPassword, byte[] password, string firstName, string lastName, string middleName, string emailAddress, Nullable<System.DateTime> expireDate, Nullable<bool> neverExpire, Nullable<bool> disabled, Nullable<long> userRole, string lastUpdateBy)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var resetPasswordParameter = resetPassword.HasValue ?
                new ObjectParameter("ResetPassword", resetPassword) :
                new ObjectParameter("ResetPassword", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(byte[]));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(System.DateTime));
    
            var neverExpireParameter = neverExpire.HasValue ?
                new ObjectParameter("NeverExpire", neverExpire) :
                new ObjectParameter("NeverExpire", typeof(bool));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(bool));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(long));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditIkoUser", loginIDParameter, resetPasswordParameter, passwordParameter, firstNameParameter, lastNameParameter, middleNameParameter, emailAddressParameter, expireDateParameter, neverExpireParameter, disabledParameter, userRoleParameter, lastUpdateByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_Barcode(string barcode)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_Barcode", barcodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_CassetteBarcode(string cassetteBarcode)
        {
            var cassetteBarcodeParameter = cassetteBarcode != null ?
                new ObjectParameter("CassetteBarcode", cassetteBarcode) :
                new ObjectParameter("CassetteBarcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_CassetteBarcode", cassetteBarcodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_ChkGroup(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_ChkGroup", nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_ChkLogin(string loginID)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_ChkLogin", loginIDParameter);
        }
    
        public virtual int SP_EX_DeleteApplication(string iD, string name)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_DeleteApplication", iDParameter, nameParameter);
        }
    
        public virtual ObjectResult<SP_EX_GenericAppData_Result> SP_EX_GenericAppData(Nullable<int> genericAppConfigID, string levelName)
        {
            var genericAppConfigIDParameter = genericAppConfigID.HasValue ?
                new ObjectParameter("GenericAppConfigID", genericAppConfigID) :
                new ObjectParameter("GenericAppConfigID", typeof(int));
    
            var levelNameParameter = levelName != null ?
                new ObjectParameter("LevelName", levelName) :
                new ObjectParameter("LevelName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GenericAppData_Result>("SP_EX_GenericAppData", genericAppConfigIDParameter, levelNameParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetBarcodeValues_Result> SP_EX_GetBarcodeValues(string iDENTITY, Nullable<int> iD)
        {
            var iDENTITYParameter = iDENTITY != null ?
                new ObjectParameter("IDENTITY", iDENTITY) :
                new ObjectParameter("IDENTITY", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetBarcodeValues_Result>("SP_EX_GetBarcodeValues", iDENTITYParameter, iDParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetChannelData_Result> SP_EX_GetChannelData(Nullable<int> genericAppConfigID, string levelName, Nullable<int> channelVisitSequence)
        {
            var genericAppConfigIDParameter = genericAppConfigID.HasValue ?
                new ObjectParameter("GenericAppConfigID", genericAppConfigID) :
                new ObjectParameter("GenericAppConfigID", typeof(int));
    
            var levelNameParameter = levelName != null ?
                new ObjectParameter("LevelName", levelName) :
                new ObjectParameter("LevelName", typeof(string));
    
            var channelVisitSequenceParameter = channelVisitSequence.HasValue ?
                new ObjectParameter("ChannelVisitSequence", channelVisitSequence) :
                new ObjectParameter("ChannelVisitSequence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetChannelData_Result>("SP_EX_GetChannelData", genericAppConfigIDParameter, levelNameParameter, channelVisitSequenceParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetDotCountingMethod_Result> SP_EX_GetDotCountingMethod(string dotCountingMethodName)
        {
            var dotCountingMethodNameParameter = dotCountingMethodName != null ?
                new ObjectParameter("DotCountingMethodName", dotCountingMethodName) :
                new ObjectParameter("DotCountingMethodName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetDotCountingMethod_Result>("SP_EX_GetDotCountingMethod", dotCountingMethodNameParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetDotCountingMethodAttributeValues_Result> SP_EX_GetDotCountingMethodAttributeValues(Nullable<int> methodID)
        {
            var methodIDParameter = methodID.HasValue ?
                new ObjectParameter("MethodID", methodID) :
                new ObjectParameter("MethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetDotCountingMethodAttributeValues_Result>("SP_EX_GetDotCountingMethodAttributeValues", methodIDParameter);
        }
    
        public virtual int SP_EX_GetDropdownValues(string iDENTITY, Nullable<int> iD)
        {
            var iDENTITYParameter = iDENTITY != null ?
                new ObjectParameter("IDENTITY", iDENTITY) :
                new ObjectParameter("IDENTITY", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_GetDropdownValues", iDENTITYParameter, iDParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetGenericAppScanConfigMethodAttributeValue_Result> SP_EX_GetGenericAppScanConfigMethodAttributeValue(Nullable<int> genericAppConfigID)
        {
            var genericAppConfigIDParameter = genericAppConfigID.HasValue ?
                new ObjectParameter("GenericAppConfigID", genericAppConfigID) :
                new ObjectParameter("GenericAppConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetGenericAppScanConfigMethodAttributeValue_Result>("SP_EX_GetGenericAppScanConfigMethodAttributeValue", genericAppConfigIDParameter);
        }
    
        public virtual ObjectResult<string> SP_EX_GetHelp(string name, string softwareName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var softwareNameParameter = softwareName != null ?
                new ObjectParameter("SoftwareName", softwareName) :
                new ObjectParameter("SoftwareName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_EX_GetHelp", nameParameter, softwareNameParameter);
        }
    
        public virtual int SP_EX_GetHelpDescription(string table, string name)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_GetHelpDescription", tableParameter, nameParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetMethodAttribute_Result> SP_EX_GetMethodAttribute(Nullable<int> attributeID)
        {
            var attributeIDParameter = attributeID.HasValue ?
                new ObjectParameter("attributeID", attributeID) :
                new ObjectParameter("attributeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetMethodAttribute_Result>("SP_EX_GetMethodAttribute", attributeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_GetScanLevel(Nullable<int> genericAppConfigID)
        {
            var genericAppConfigIDParameter = genericAppConfigID.HasValue ?
                new ObjectParameter("GenericAppConfigID", genericAppConfigID) :
                new ObjectParameter("GenericAppConfigID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_GetScanLevel", genericAppConfigIDParameter);
        }
    
        public virtual int SP_EX_GetSlideData(string barcode, string explorer, string prostate, string fetal, string metaphase, string tissue, string pTEN, string cSII, string genericApp, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string patientName)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var explorerParameter = explorer != null ?
                new ObjectParameter("Explorer", explorer) :
                new ObjectParameter("Explorer", typeof(string));
    
            var prostateParameter = prostate != null ?
                new ObjectParameter("Prostate", prostate) :
                new ObjectParameter("Prostate", typeof(string));
    
            var fetalParameter = fetal != null ?
                new ObjectParameter("Fetal", fetal) :
                new ObjectParameter("Fetal", typeof(string));
    
            var metaphaseParameter = metaphase != null ?
                new ObjectParameter("Metaphase", metaphase) :
                new ObjectParameter("Metaphase", typeof(string));
    
            var tissueParameter = tissue != null ?
                new ObjectParameter("Tissue", tissue) :
                new ObjectParameter("Tissue", typeof(string));
    
            var pTENParameter = pTEN != null ?
                new ObjectParameter("PTEN", pTEN) :
                new ObjectParameter("PTEN", typeof(string));
    
            var cSIIParameter = cSII != null ?
                new ObjectParameter("CSII", cSII) :
                new ObjectParameter("CSII", typeof(string));
    
            var genericAppParameter = genericApp != null ?
                new ObjectParameter("GenericApp", genericApp) :
                new ObjectParameter("GenericApp", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_GetSlideData", barcodeParameter, explorerParameter, prostateParameter, fetalParameter, metaphaseParameter, tissueParameter, pTENParameter, cSIIParameter, genericAppParameter, fromDateParameter, toDateParameter, patientNameParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetTargetClassifications_Result> SP_EX_GetTargetClassifications(string targetClassificationSetName)
        {
            var targetClassificationSetNameParameter = targetClassificationSetName != null ?
                new ObjectParameter("TargetClassificationSetName", targetClassificationSetName) :
                new ObjectParameter("TargetClassificationSetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetTargetClassifications_Result>("SP_EX_GetTargetClassifications", targetClassificationSetNameParameter);
        }
    
        public virtual ObjectResult<SP_EX_GetTargetClassificationSet_Result> SP_EX_GetTargetClassificationSet(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_GetTargetClassificationSet_Result>("SP_EX_GetTargetClassificationSet", nameParameter);
        }
    
        public virtual int SP_EX_insertChannelConfigMethodAttributeTissue(Nullable<int> gENERICCHANNELCONFIGID, string tissueSelector, string dotCountMin, string dotCountMax)
        {
            var gENERICCHANNELCONFIGIDParameter = gENERICCHANNELCONFIGID.HasValue ?
                new ObjectParameter("GENERICCHANNELCONFIGID", gENERICCHANNELCONFIGID) :
                new ObjectParameter("GENERICCHANNELCONFIGID", typeof(int));
    
            var tissueSelectorParameter = tissueSelector != null ?
                new ObjectParameter("TissueSelector", tissueSelector) :
                new ObjectParameter("TissueSelector", typeof(string));
    
            var dotCountMinParameter = dotCountMin != null ?
                new ObjectParameter("DotCountMin", dotCountMin) :
                new ObjectParameter("DotCountMin", typeof(string));
    
            var dotCountMaxParameter = dotCountMax != null ?
                new ObjectParameter("DotCountMax", dotCountMax) :
                new ObjectParameter("DotCountMax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_insertChannelConfigMethodAttributeTissue", gENERICCHANNELCONFIGIDParameter, tissueSelectorParameter, dotCountMinParameter, dotCountMaxParameter);
        }
    
        public virtual int SP_EX_InsertGenericAppScanConfigMethodAttributeValue(Nullable<int> genericAppScanConfigID, Nullable<int> methodTypeID, Nullable<int> methodID, string value1, string value2)
        {
            var genericAppScanConfigIDParameter = genericAppScanConfigID.HasValue ?
                new ObjectParameter("GenericAppScanConfigID", genericAppScanConfigID) :
                new ObjectParameter("GenericAppScanConfigID", typeof(int));
    
            var methodTypeIDParameter = methodTypeID.HasValue ?
                new ObjectParameter("MethodTypeID", methodTypeID) :
                new ObjectParameter("MethodTypeID", typeof(int));
    
            var methodIDParameter = methodID.HasValue ?
                new ObjectParameter("MethodID", methodID) :
                new ObjectParameter("MethodID", typeof(int));
    
            var value1Parameter = value1 != null ?
                new ObjectParameter("Value1", value1) :
                new ObjectParameter("Value1", typeof(string));
    
            var value2Parameter = value2 != null ?
                new ObjectParameter("Value2", value2) :
                new ObjectParameter("Value2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_InsertGenericAppScanConfigMethodAttributeValue", genericAppScanConfigIDParameter, methodTypeIDParameter, methodIDParameter, value1Parameter, value2Parameter);
        }
    
        public virtual int SP_EX_insertGenericChannelConfigMethodAttributeValue(Nullable<int> gENERICCHANNELCONFIGID, string cHECKBLEEDTHROUGH, string cHECKFUSION, string cHECKBREAKAPART, string sPLITSIGDOTSSPACINGINMICRONS, string sPLITSIGDOTDIAMETERINMICRONS, Nullable<int> dOTMETHODID)
        {
            var gENERICCHANNELCONFIGIDParameter = gENERICCHANNELCONFIGID.HasValue ?
                new ObjectParameter("GENERICCHANNELCONFIGID", gENERICCHANNELCONFIGID) :
                new ObjectParameter("GENERICCHANNELCONFIGID", typeof(int));
    
            var cHECKBLEEDTHROUGHParameter = cHECKBLEEDTHROUGH != null ?
                new ObjectParameter("CHECKBLEEDTHROUGH", cHECKBLEEDTHROUGH) :
                new ObjectParameter("CHECKBLEEDTHROUGH", typeof(string));
    
            var cHECKFUSIONParameter = cHECKFUSION != null ?
                new ObjectParameter("CHECKFUSION", cHECKFUSION) :
                new ObjectParameter("CHECKFUSION", typeof(string));
    
            var cHECKBREAKAPARTParameter = cHECKBREAKAPART != null ?
                new ObjectParameter("CHECKBREAKAPART", cHECKBREAKAPART) :
                new ObjectParameter("CHECKBREAKAPART", typeof(string));
    
            var sPLITSIGDOTSSPACINGINMICRONSParameter = sPLITSIGDOTSSPACINGINMICRONS != null ?
                new ObjectParameter("SPLITSIGDOTSSPACINGINMICRONS", sPLITSIGDOTSSPACINGINMICRONS) :
                new ObjectParameter("SPLITSIGDOTSSPACINGINMICRONS", typeof(string));
    
            var sPLITSIGDOTDIAMETERINMICRONSParameter = sPLITSIGDOTDIAMETERINMICRONS != null ?
                new ObjectParameter("SPLITSIGDOTDIAMETERINMICRONS", sPLITSIGDOTDIAMETERINMICRONS) :
                new ObjectParameter("SPLITSIGDOTDIAMETERINMICRONS", typeof(string));
    
            var dOTMETHODIDParameter = dOTMETHODID.HasValue ?
                new ObjectParameter("DOTMETHODID", dOTMETHODID) :
                new ObjectParameter("DOTMETHODID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_insertGenericChannelConfigMethodAttributeValue", gENERICCHANNELCONFIGIDParameter, cHECKBLEEDTHROUGHParameter, cHECKFUSIONParameter, cHECKBREAKAPARTParameter, sPLITSIGDOTSSPACINGINMICRONSParameter, sPLITSIGDOTDIAMETERINMICRONSParameter, dOTMETHODIDParameter);
        }
    
        public virtual int SP_EX_insertGenericChannelConfigMethodAttributeValue2(Nullable<int> gENERICCHANNELCONFIGID, string ctcSelector)
        {
            var gENERICCHANNELCONFIGIDParameter = gENERICCHANNELCONFIGID.HasValue ?
                new ObjectParameter("GENERICCHANNELCONFIGID", gENERICCHANNELCONFIGID) :
                new ObjectParameter("GENERICCHANNELCONFIGID", typeof(int));
    
            var ctcSelectorParameter = ctcSelector != null ?
                new ObjectParameter("CtcSelector", ctcSelector) :
                new ObjectParameter("CtcSelector", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_insertGenericChannelConfigMethodAttributeValue2", gENERICCHANNELCONFIGIDParameter, ctcSelectorParameter);
        }
    
        public virtual int SP_EX_InsertSlide(Nullable<int> depositionAreaId1, Nullable<int> genericAppConfigID1, Nullable<int> depositionAreaId2, Nullable<int> genericAppConfigID2, string barcode, string patientBarcode, string cassetteBarcode, string userLoginID, string accession, string indication, string caseNumber, string specimenType, string sample, Nullable<float> volume, string fetalCustom)
        {
            var depositionAreaId1Parameter = depositionAreaId1.HasValue ?
                new ObjectParameter("DepositionAreaId1", depositionAreaId1) :
                new ObjectParameter("DepositionAreaId1", typeof(int));
    
            var genericAppConfigID1Parameter = genericAppConfigID1.HasValue ?
                new ObjectParameter("GenericAppConfigID1", genericAppConfigID1) :
                new ObjectParameter("GenericAppConfigID1", typeof(int));
    
            var depositionAreaId2Parameter = depositionAreaId2.HasValue ?
                new ObjectParameter("DepositionAreaId2", depositionAreaId2) :
                new ObjectParameter("DepositionAreaId2", typeof(int));
    
            var genericAppConfigID2Parameter = genericAppConfigID2.HasValue ?
                new ObjectParameter("GenericAppConfigID2", genericAppConfigID2) :
                new ObjectParameter("GenericAppConfigID2", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var patientBarcodeParameter = patientBarcode != null ?
                new ObjectParameter("PatientBarcode", patientBarcode) :
                new ObjectParameter("PatientBarcode", typeof(string));
    
            var cassetteBarcodeParameter = cassetteBarcode != null ?
                new ObjectParameter("CassetteBarcode", cassetteBarcode) :
                new ObjectParameter("CassetteBarcode", typeof(string));
    
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var accessionParameter = accession != null ?
                new ObjectParameter("Accession", accession) :
                new ObjectParameter("Accession", typeof(string));
    
            var indicationParameter = indication != null ?
                new ObjectParameter("Indication", indication) :
                new ObjectParameter("Indication", typeof(string));
    
            var caseNumberParameter = caseNumber != null ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(string));
    
            var specimenTypeParameter = specimenType != null ?
                new ObjectParameter("SpecimenType", specimenType) :
                new ObjectParameter("SpecimenType", typeof(string));
    
            var sampleParameter = sample != null ?
                new ObjectParameter("Sample", sample) :
                new ObjectParameter("Sample", typeof(string));
    
            var volumeParameter = volume.HasValue ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(float));
    
            var fetalCustomParameter = fetalCustom != null ?
                new ObjectParameter("FetalCustom", fetalCustom) :
                new ObjectParameter("FetalCustom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_InsertSlide", depositionAreaId1Parameter, genericAppConfigID1Parameter, depositionAreaId2Parameter, genericAppConfigID2Parameter, barcodeParameter, patientBarcodeParameter, cassetteBarcodeParameter, userLoginIDParameter, accessionParameter, indicationParameter, caseNumberParameter, specimenTypeParameter, sampleParameter, volumeParameter, fetalCustomParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_Login(string loginID, byte[] password)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_Login", loginIDParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SP_EX_openAppicationData_Result> SP_EX_openAppicationData(Nullable<int> gENERICAPPID, Nullable<float> sCANLEVEL, Nullable<int> oBJECTIVEPOWER, Nullable<int> pREPROCESSINGMETHODID, Nullable<int> sLIDEADAPTATIONMETHODID, Nullable<int> tARGETSELECTIONMETHODID, Nullable<int> sCANAREAREDEFININGMETHODID, Nullable<int> rEORDERFIELDVISITSEQUENCEMETHODID, Nullable<int> bLEEDTHROUGHCHECKMETHODID, Nullable<int> tARGETCLASSIFICATIONMETHODID, Nullable<int> tARGETCLASSBINNINGMETHODID, Nullable<int> sTOPCONDITIONMETHODID, Nullable<int> pOSTPROCESSINGMETHODID, string lEVELNAME, string tARGETSNAME)
        {
            var gENERICAPPIDParameter = gENERICAPPID.HasValue ?
                new ObjectParameter("GENERICAPPID", gENERICAPPID) :
                new ObjectParameter("GENERICAPPID", typeof(int));
    
            var sCANLEVELParameter = sCANLEVEL.HasValue ?
                new ObjectParameter("SCANLEVEL", sCANLEVEL) :
                new ObjectParameter("SCANLEVEL", typeof(float));
    
            var oBJECTIVEPOWERParameter = oBJECTIVEPOWER.HasValue ?
                new ObjectParameter("OBJECTIVEPOWER", oBJECTIVEPOWER) :
                new ObjectParameter("OBJECTIVEPOWER", typeof(int));
    
            var pREPROCESSINGMETHODIDParameter = pREPROCESSINGMETHODID.HasValue ?
                new ObjectParameter("PREPROCESSINGMETHODID", pREPROCESSINGMETHODID) :
                new ObjectParameter("PREPROCESSINGMETHODID", typeof(int));
    
            var sLIDEADAPTATIONMETHODIDParameter = sLIDEADAPTATIONMETHODID.HasValue ?
                new ObjectParameter("SLIDEADAPTATIONMETHODID", sLIDEADAPTATIONMETHODID) :
                new ObjectParameter("SLIDEADAPTATIONMETHODID", typeof(int));
    
            var tARGETSELECTIONMETHODIDParameter = tARGETSELECTIONMETHODID.HasValue ?
                new ObjectParameter("TARGETSELECTIONMETHODID", tARGETSELECTIONMETHODID) :
                new ObjectParameter("TARGETSELECTIONMETHODID", typeof(int));
    
            var sCANAREAREDEFININGMETHODIDParameter = sCANAREAREDEFININGMETHODID.HasValue ?
                new ObjectParameter("SCANAREAREDEFININGMETHODID", sCANAREAREDEFININGMETHODID) :
                new ObjectParameter("SCANAREAREDEFININGMETHODID", typeof(int));
    
            var rEORDERFIELDVISITSEQUENCEMETHODIDParameter = rEORDERFIELDVISITSEQUENCEMETHODID.HasValue ?
                new ObjectParameter("REORDERFIELDVISITSEQUENCEMETHODID", rEORDERFIELDVISITSEQUENCEMETHODID) :
                new ObjectParameter("REORDERFIELDVISITSEQUENCEMETHODID", typeof(int));
    
            var bLEEDTHROUGHCHECKMETHODIDParameter = bLEEDTHROUGHCHECKMETHODID.HasValue ?
                new ObjectParameter("BLEEDTHROUGHCHECKMETHODID", bLEEDTHROUGHCHECKMETHODID) :
                new ObjectParameter("BLEEDTHROUGHCHECKMETHODID", typeof(int));
    
            var tARGETCLASSIFICATIONMETHODIDParameter = tARGETCLASSIFICATIONMETHODID.HasValue ?
                new ObjectParameter("TARGETCLASSIFICATIONMETHODID", tARGETCLASSIFICATIONMETHODID) :
                new ObjectParameter("TARGETCLASSIFICATIONMETHODID", typeof(int));
    
            var tARGETCLASSBINNINGMETHODIDParameter = tARGETCLASSBINNINGMETHODID.HasValue ?
                new ObjectParameter("TARGETCLASSBINNINGMETHODID", tARGETCLASSBINNINGMETHODID) :
                new ObjectParameter("TARGETCLASSBINNINGMETHODID", typeof(int));
    
            var sTOPCONDITIONMETHODIDParameter = sTOPCONDITIONMETHODID.HasValue ?
                new ObjectParameter("STOPCONDITIONMETHODID", sTOPCONDITIONMETHODID) :
                new ObjectParameter("STOPCONDITIONMETHODID", typeof(int));
    
            var pOSTPROCESSINGMETHODIDParameter = pOSTPROCESSINGMETHODID.HasValue ?
                new ObjectParameter("POSTPROCESSINGMETHODID", pOSTPROCESSINGMETHODID) :
                new ObjectParameter("POSTPROCESSINGMETHODID", typeof(int));
    
            var lEVELNAMEParameter = lEVELNAME != null ?
                new ObjectParameter("LEVELNAME", lEVELNAME) :
                new ObjectParameter("LEVELNAME", typeof(string));
    
            var tARGETSNAMEParameter = tARGETSNAME != null ?
                new ObjectParameter("TARGETSNAME", tARGETSNAME) :
                new ObjectParameter("TARGETSNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_openAppicationData_Result>("SP_EX_openAppicationData", gENERICAPPIDParameter, sCANLEVELParameter, oBJECTIVEPOWERParameter, pREPROCESSINGMETHODIDParameter, sLIDEADAPTATIONMETHODIDParameter, tARGETSELECTIONMETHODIDParameter, sCANAREAREDEFININGMETHODIDParameter, rEORDERFIELDVISITSEQUENCEMETHODIDParameter, bLEEDTHROUGHCHECKMETHODIDParameter, tARGETCLASSIFICATIONMETHODIDParameter, tARGETCLASSBINNINGMETHODIDParameter, sTOPCONDITIONMETHODIDParameter, pOSTPROCESSINGMETHODIDParameter, lEVELNAMEParameter, tARGETSNAMEParameter);
        }
    
        public virtual ObjectResult<SP_EX_openSlide_Result> SP_EX_openSlide(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EX_openSlide_Result>("SP_EX_openSlide", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_saveChannelData(Nullable<int> gENERICAPPSCANCONFIGID, Nullable<int> fILTERSETID, Nullable<int> gENERICAPPSCANSTRUCTUREID, Nullable<bool> iSAUTOEXPOSED, Nullable<float> mANUALEXPOSUREMILLISECONDS, Nullable<int> aUTOFOCUSMETHODID, Nullable<int> aUTOEXPOSUREMETHODID, Nullable<bool> aPPLYFLATFIELDCORRECTION, Nullable<int> aCQUISITIONCAMERAGAIN, Nullable<int> cOMPRESSIONRATIO, Nullable<int> dOTCOUNTINGMETHODID, Nullable<int> sKIPFIELDCONDITIONMETHODID, Nullable<int> fINDBESTSLICEMETHODID, Nullable<bool> aLLOWEDIT, Nullable<bool> iSBRIGHTFIELD)
        {
            var gENERICAPPSCANCONFIGIDParameter = gENERICAPPSCANCONFIGID.HasValue ?
                new ObjectParameter("GENERICAPPSCANCONFIGID", gENERICAPPSCANCONFIGID) :
                new ObjectParameter("GENERICAPPSCANCONFIGID", typeof(int));
    
            var fILTERSETIDParameter = fILTERSETID.HasValue ?
                new ObjectParameter("FILTERSETID", fILTERSETID) :
                new ObjectParameter("FILTERSETID", typeof(int));
    
            var gENERICAPPSCANSTRUCTUREIDParameter = gENERICAPPSCANSTRUCTUREID.HasValue ?
                new ObjectParameter("GENERICAPPSCANSTRUCTUREID", gENERICAPPSCANSTRUCTUREID) :
                new ObjectParameter("GENERICAPPSCANSTRUCTUREID", typeof(int));
    
            var iSAUTOEXPOSEDParameter = iSAUTOEXPOSED.HasValue ?
                new ObjectParameter("ISAUTOEXPOSED", iSAUTOEXPOSED) :
                new ObjectParameter("ISAUTOEXPOSED", typeof(bool));
    
            var mANUALEXPOSUREMILLISECONDSParameter = mANUALEXPOSUREMILLISECONDS.HasValue ?
                new ObjectParameter("MANUALEXPOSUREMILLISECONDS", mANUALEXPOSUREMILLISECONDS) :
                new ObjectParameter("MANUALEXPOSUREMILLISECONDS", typeof(float));
    
            var aUTOFOCUSMETHODIDParameter = aUTOFOCUSMETHODID.HasValue ?
                new ObjectParameter("AUTOFOCUSMETHODID", aUTOFOCUSMETHODID) :
                new ObjectParameter("AUTOFOCUSMETHODID", typeof(int));
    
            var aUTOEXPOSUREMETHODIDParameter = aUTOEXPOSUREMETHODID.HasValue ?
                new ObjectParameter("AUTOEXPOSUREMETHODID", aUTOEXPOSUREMETHODID) :
                new ObjectParameter("AUTOEXPOSUREMETHODID", typeof(int));
    
            var aPPLYFLATFIELDCORRECTIONParameter = aPPLYFLATFIELDCORRECTION.HasValue ?
                new ObjectParameter("APPLYFLATFIELDCORRECTION", aPPLYFLATFIELDCORRECTION) :
                new ObjectParameter("APPLYFLATFIELDCORRECTION", typeof(bool));
    
            var aCQUISITIONCAMERAGAINParameter = aCQUISITIONCAMERAGAIN.HasValue ?
                new ObjectParameter("ACQUISITIONCAMERAGAIN", aCQUISITIONCAMERAGAIN) :
                new ObjectParameter("ACQUISITIONCAMERAGAIN", typeof(int));
    
            var cOMPRESSIONRATIOParameter = cOMPRESSIONRATIO.HasValue ?
                new ObjectParameter("COMPRESSIONRATIO", cOMPRESSIONRATIO) :
                new ObjectParameter("COMPRESSIONRATIO", typeof(int));
    
            var dOTCOUNTINGMETHODIDParameter = dOTCOUNTINGMETHODID.HasValue ?
                new ObjectParameter("DOTCOUNTINGMETHODID", dOTCOUNTINGMETHODID) :
                new ObjectParameter("DOTCOUNTINGMETHODID", typeof(int));
    
            var sKIPFIELDCONDITIONMETHODIDParameter = sKIPFIELDCONDITIONMETHODID.HasValue ?
                new ObjectParameter("SKIPFIELDCONDITIONMETHODID", sKIPFIELDCONDITIONMETHODID) :
                new ObjectParameter("SKIPFIELDCONDITIONMETHODID", typeof(int));
    
            var fINDBESTSLICEMETHODIDParameter = fINDBESTSLICEMETHODID.HasValue ?
                new ObjectParameter("FINDBESTSLICEMETHODID", fINDBESTSLICEMETHODID) :
                new ObjectParameter("FINDBESTSLICEMETHODID", typeof(int));
    
            var aLLOWEDITParameter = aLLOWEDIT.HasValue ?
                new ObjectParameter("ALLOWEDIT", aLLOWEDIT) :
                new ObjectParameter("ALLOWEDIT", typeof(bool));
    
            var iSBRIGHTFIELDParameter = iSBRIGHTFIELD.HasValue ?
                new ObjectParameter("ISBRIGHTFIELD", iSBRIGHTFIELD) :
                new ObjectParameter("ISBRIGHTFIELD", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_saveChannelData", gENERICAPPSCANCONFIGIDParameter, fILTERSETIDParameter, gENERICAPPSCANSTRUCTUREIDParameter, iSAUTOEXPOSEDParameter, mANUALEXPOSUREMILLISECONDSParameter, aUTOFOCUSMETHODIDParameter, aUTOEXPOSUREMETHODIDParameter, aPPLYFLATFIELDCORRECTIONParameter, aCQUISITIONCAMERAGAINParameter, cOMPRESSIONRATIOParameter, dOTCOUNTINGMETHODIDParameter, sKIPFIELDCONDITIONMETHODIDParameter, fINDBESTSLICEMETHODIDParameter, aLLOWEDITParameter, iSBRIGHTFIELDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_SaveDotCountingMethod(string name, string className, string displayedName, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var displayedNameParameter = displayedName != null ?
                new ObjectParameter("DisplayedName", displayedName) :
                new ObjectParameter("DisplayedName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_SaveDotCountingMethod", nameParameter, classNameParameter, displayedNameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_SaveDotCountingMethodAttributeValue(Nullable<int> dotCountingMethodID, Nullable<int> attributeID, string value)
        {
            var dotCountingMethodIDParameter = dotCountingMethodID.HasValue ?
                new ObjectParameter("DotCountingMethodID", dotCountingMethodID) :
                new ObjectParameter("DotCountingMethodID", typeof(int));
    
            var attributeIDParameter = attributeID.HasValue ?
                new ObjectParameter("AttributeID", attributeID) :
                new ObjectParameter("AttributeID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_SaveDotCountingMethodAttributeValue", dotCountingMethodIDParameter, attributeIDParameter, valueParameter);
        }
    
        public virtual ObjectResult<string> SP_EX_SaveFetalCustomDepositionArea(Nullable<int> centerXInMicron, Nullable<int> centerYInMicron, Nullable<int> widthSpanInMicron, Nullable<int> heightSpanInMicron, string userLoginID, string shapeName)
        {
            var centerXInMicronParameter = centerXInMicron.HasValue ?
                new ObjectParameter("CenterXInMicron", centerXInMicron) :
                new ObjectParameter("CenterXInMicron", typeof(int));
    
            var centerYInMicronParameter = centerYInMicron.HasValue ?
                new ObjectParameter("CenterYInMicron", centerYInMicron) :
                new ObjectParameter("CenterYInMicron", typeof(int));
    
            var widthSpanInMicronParameter = widthSpanInMicron.HasValue ?
                new ObjectParameter("WidthSpanInMicron", widthSpanInMicron) :
                new ObjectParameter("WidthSpanInMicron", typeof(int));
    
            var heightSpanInMicronParameter = heightSpanInMicron.HasValue ?
                new ObjectParameter("HeightSpanInMicron", heightSpanInMicron) :
                new ObjectParameter("HeightSpanInMicron", typeof(int));
    
            var userLoginIDParameter = userLoginID != null ?
                new ObjectParameter("UserLoginID", userLoginID) :
                new ObjectParameter("UserLoginID", typeof(string));
    
            var shapeNameParameter = shapeName != null ?
                new ObjectParameter("ShapeName", shapeName) :
                new ObjectParameter("ShapeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_EX_SaveFetalCustomDepositionArea", centerXInMicronParameter, centerYInMicronParameter, widthSpanInMicronParameter, heightSpanInMicronParameter, userLoginIDParameter, shapeNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_saveGenericAppScan(Nullable<int> gENERICAPPID, Nullable<float> sCANLEVEL, Nullable<int> oBJECTIVEPOWER, Nullable<int> pREPROCESSINGMETHODID, Nullable<int> sLIDEADAPTATIONMETHODID, Nullable<int> tARGETSELECTIONMETHODID, Nullable<int> sCANAREAREDEFININGMETHODID, Nullable<int> rEORDERFIELDVISITSEQUENCEMETHODID, Nullable<int> bLEEDTHROUGHCHECKMETHODID, Nullable<int> tARGETCLASSIFICATIONMETHODID, Nullable<int> tARGETCLASSBINNINGMETHODID, Nullable<int> sTOPCONDITIONMETHODID, Nullable<int> pOSTPROCESSINGMETHODID, string lEVELNAME, string tARGETSNAME, Nullable<bool> mEASUREPARCENTRICITY)
        {
            var gENERICAPPIDParameter = gENERICAPPID.HasValue ?
                new ObjectParameter("GENERICAPPID", gENERICAPPID) :
                new ObjectParameter("GENERICAPPID", typeof(int));
    
            var sCANLEVELParameter = sCANLEVEL.HasValue ?
                new ObjectParameter("SCANLEVEL", sCANLEVEL) :
                new ObjectParameter("SCANLEVEL", typeof(float));
    
            var oBJECTIVEPOWERParameter = oBJECTIVEPOWER.HasValue ?
                new ObjectParameter("OBJECTIVEPOWER", oBJECTIVEPOWER) :
                new ObjectParameter("OBJECTIVEPOWER", typeof(int));
    
            var pREPROCESSINGMETHODIDParameter = pREPROCESSINGMETHODID.HasValue ?
                new ObjectParameter("PREPROCESSINGMETHODID", pREPROCESSINGMETHODID) :
                new ObjectParameter("PREPROCESSINGMETHODID", typeof(int));
    
            var sLIDEADAPTATIONMETHODIDParameter = sLIDEADAPTATIONMETHODID.HasValue ?
                new ObjectParameter("SLIDEADAPTATIONMETHODID", sLIDEADAPTATIONMETHODID) :
                new ObjectParameter("SLIDEADAPTATIONMETHODID", typeof(int));
    
            var tARGETSELECTIONMETHODIDParameter = tARGETSELECTIONMETHODID.HasValue ?
                new ObjectParameter("TARGETSELECTIONMETHODID", tARGETSELECTIONMETHODID) :
                new ObjectParameter("TARGETSELECTIONMETHODID", typeof(int));
    
            var sCANAREAREDEFININGMETHODIDParameter = sCANAREAREDEFININGMETHODID.HasValue ?
                new ObjectParameter("SCANAREAREDEFININGMETHODID", sCANAREAREDEFININGMETHODID) :
                new ObjectParameter("SCANAREAREDEFININGMETHODID", typeof(int));
    
            var rEORDERFIELDVISITSEQUENCEMETHODIDParameter = rEORDERFIELDVISITSEQUENCEMETHODID.HasValue ?
                new ObjectParameter("REORDERFIELDVISITSEQUENCEMETHODID", rEORDERFIELDVISITSEQUENCEMETHODID) :
                new ObjectParameter("REORDERFIELDVISITSEQUENCEMETHODID", typeof(int));
    
            var bLEEDTHROUGHCHECKMETHODIDParameter = bLEEDTHROUGHCHECKMETHODID.HasValue ?
                new ObjectParameter("BLEEDTHROUGHCHECKMETHODID", bLEEDTHROUGHCHECKMETHODID) :
                new ObjectParameter("BLEEDTHROUGHCHECKMETHODID", typeof(int));
    
            var tARGETCLASSIFICATIONMETHODIDParameter = tARGETCLASSIFICATIONMETHODID.HasValue ?
                new ObjectParameter("TARGETCLASSIFICATIONMETHODID", tARGETCLASSIFICATIONMETHODID) :
                new ObjectParameter("TARGETCLASSIFICATIONMETHODID", typeof(int));
    
            var tARGETCLASSBINNINGMETHODIDParameter = tARGETCLASSBINNINGMETHODID.HasValue ?
                new ObjectParameter("TARGETCLASSBINNINGMETHODID", tARGETCLASSBINNINGMETHODID) :
                new ObjectParameter("TARGETCLASSBINNINGMETHODID", typeof(int));
    
            var sTOPCONDITIONMETHODIDParameter = sTOPCONDITIONMETHODID.HasValue ?
                new ObjectParameter("STOPCONDITIONMETHODID", sTOPCONDITIONMETHODID) :
                new ObjectParameter("STOPCONDITIONMETHODID", typeof(int));
    
            var pOSTPROCESSINGMETHODIDParameter = pOSTPROCESSINGMETHODID.HasValue ?
                new ObjectParameter("POSTPROCESSINGMETHODID", pOSTPROCESSINGMETHODID) :
                new ObjectParameter("POSTPROCESSINGMETHODID", typeof(int));
    
            var lEVELNAMEParameter = lEVELNAME != null ?
                new ObjectParameter("LEVELNAME", lEVELNAME) :
                new ObjectParameter("LEVELNAME", typeof(string));
    
            var tARGETSNAMEParameter = tARGETSNAME != null ?
                new ObjectParameter("TARGETSNAME", tARGETSNAME) :
                new ObjectParameter("TARGETSNAME", typeof(string));
    
            var mEASUREPARCENTRICITYParameter = mEASUREPARCENTRICITY.HasValue ?
                new ObjectParameter("MEASUREPARCENTRICITY", mEASUREPARCENTRICITY) :
                new ObjectParameter("MEASUREPARCENTRICITY", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_saveGenericAppScan", gENERICAPPIDParameter, sCANLEVELParameter, oBJECTIVEPOWERParameter, pREPROCESSINGMETHODIDParameter, sLIDEADAPTATIONMETHODIDParameter, tARGETSELECTIONMETHODIDParameter, sCANAREAREDEFININGMETHODIDParameter, rEORDERFIELDVISITSEQUENCEMETHODIDParameter, bLEEDTHROUGHCHECKMETHODIDParameter, tARGETCLASSIFICATIONMETHODIDParameter, tARGETCLASSBINNINGMETHODIDParameter, sTOPCONDITIONMETHODIDParameter, pOSTPROCESSINGMETHODIDParameter, lEVELNAMEParameter, tARGETSNAMEParameter, mEASUREPARCENTRICITYParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_saveGenericAppScanConfig(Nullable<int> gENERICAPPCONFIGID, Nullable<int> gENERICAPPSCANID, Nullable<int> fIELDOVERLAPXINMICRON, Nullable<int> fIELDOVERLAPYINMICRON, Nullable<int> aCQUISITIONBINNINGMODE, Nullable<int> nUMBEROFSLICES, Nullable<int> cENTERSLICEOFFSET, Nullable<int> nUMBEROFTARGETS, Nullable<int> vISITSEQUENCEMETHODID, Nullable<bool> aLLOWREPEATSCAN, Nullable<bool> uSEMAXIMIZETARGETCOUNTSPERFIELD, Nullable<bool> vIRTUALSCAN)
        {
            var gENERICAPPCONFIGIDParameter = gENERICAPPCONFIGID.HasValue ?
                new ObjectParameter("GENERICAPPCONFIGID", gENERICAPPCONFIGID) :
                new ObjectParameter("GENERICAPPCONFIGID", typeof(int));
    
            var gENERICAPPSCANIDParameter = gENERICAPPSCANID.HasValue ?
                new ObjectParameter("GENERICAPPSCANID", gENERICAPPSCANID) :
                new ObjectParameter("GENERICAPPSCANID", typeof(int));
    
            var fIELDOVERLAPXINMICRONParameter = fIELDOVERLAPXINMICRON.HasValue ?
                new ObjectParameter("FIELDOVERLAPXINMICRON", fIELDOVERLAPXINMICRON) :
                new ObjectParameter("FIELDOVERLAPXINMICRON", typeof(int));
    
            var fIELDOVERLAPYINMICRONParameter = fIELDOVERLAPYINMICRON.HasValue ?
                new ObjectParameter("FIELDOVERLAPYINMICRON", fIELDOVERLAPYINMICRON) :
                new ObjectParameter("FIELDOVERLAPYINMICRON", typeof(int));
    
            var aCQUISITIONBINNINGMODEParameter = aCQUISITIONBINNINGMODE.HasValue ?
                new ObjectParameter("ACQUISITIONBINNINGMODE", aCQUISITIONBINNINGMODE) :
                new ObjectParameter("ACQUISITIONBINNINGMODE", typeof(int));
    
            var nUMBEROFSLICESParameter = nUMBEROFSLICES.HasValue ?
                new ObjectParameter("NUMBEROFSLICES", nUMBEROFSLICES) :
                new ObjectParameter("NUMBEROFSLICES", typeof(int));
    
            var cENTERSLICEOFFSETParameter = cENTERSLICEOFFSET.HasValue ?
                new ObjectParameter("CENTERSLICEOFFSET", cENTERSLICEOFFSET) :
                new ObjectParameter("CENTERSLICEOFFSET", typeof(int));
    
            var nUMBEROFTARGETSParameter = nUMBEROFTARGETS.HasValue ?
                new ObjectParameter("NUMBEROFTARGETS", nUMBEROFTARGETS) :
                new ObjectParameter("NUMBEROFTARGETS", typeof(int));
    
            var vISITSEQUENCEMETHODIDParameter = vISITSEQUENCEMETHODID.HasValue ?
                new ObjectParameter("VISITSEQUENCEMETHODID", vISITSEQUENCEMETHODID) :
                new ObjectParameter("VISITSEQUENCEMETHODID", typeof(int));
    
            var aLLOWREPEATSCANParameter = aLLOWREPEATSCAN.HasValue ?
                new ObjectParameter("ALLOWREPEATSCAN", aLLOWREPEATSCAN) :
                new ObjectParameter("ALLOWREPEATSCAN", typeof(bool));
    
            var uSEMAXIMIZETARGETCOUNTSPERFIELDParameter = uSEMAXIMIZETARGETCOUNTSPERFIELD.HasValue ?
                new ObjectParameter("USEMAXIMIZETARGETCOUNTSPERFIELD", uSEMAXIMIZETARGETCOUNTSPERFIELD) :
                new ObjectParameter("USEMAXIMIZETARGETCOUNTSPERFIELD", typeof(bool));
    
            var vIRTUALSCANParameter = vIRTUALSCAN.HasValue ?
                new ObjectParameter("VIRTUALSCAN", vIRTUALSCAN) :
                new ObjectParameter("VIRTUALSCAN", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_saveGenericAppScanConfig", gENERICAPPCONFIGIDParameter, gENERICAPPSCANIDParameter, fIELDOVERLAPXINMICRONParameter, fIELDOVERLAPYINMICRONParameter, aCQUISITIONBINNINGMODEParameter, nUMBEROFSLICESParameter, cENTERSLICEOFFSETParameter, nUMBEROFTARGETSParameter, vISITSEQUENCEMETHODIDParameter, aLLOWREPEATSCANParameter, uSEMAXIMIZETARGETCOUNTSPERFIELDParameter, vIRTUALSCANParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_saveGenericAppScanStructure(Nullable<int> gENERICAPPSCANID, Nullable<int> sTRUCTUREID, Nullable<int> vISITSEQUENCE, Nullable<bool> iSDISPLAYEDBYDEFAULT)
        {
            var gENERICAPPSCANIDParameter = gENERICAPPSCANID.HasValue ?
                new ObjectParameter("GENERICAPPSCANID", gENERICAPPSCANID) :
                new ObjectParameter("GENERICAPPSCANID", typeof(int));
    
            var sTRUCTUREIDParameter = sTRUCTUREID.HasValue ?
                new ObjectParameter("STRUCTUREID", sTRUCTUREID) :
                new ObjectParameter("STRUCTUREID", typeof(int));
    
            var vISITSEQUENCEParameter = vISITSEQUENCE.HasValue ?
                new ObjectParameter("VISITSEQUENCE", vISITSEQUENCE) :
                new ObjectParameter("VISITSEQUENCE", typeof(int));
    
            var iSDISPLAYEDBYDEFAULTParameter = iSDISPLAYEDBYDEFAULT.HasValue ?
                new ObjectParameter("ISDISPLAYEDBYDEFAULT", iSDISPLAYEDBYDEFAULT) :
                new ObjectParameter("ISDISPLAYEDBYDEFAULT", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_saveGenericAppScanStructure", gENERICAPPSCANIDParameter, sTRUCTUREIDParameter, vISITSEQUENCEParameter, iSDISPLAYEDBYDEFAULTParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_saveGenerisApp(string aPPNAME, string aPPDES, string aBBREVIAT, Nullable<int> aPPREPID, Nullable<bool> aPPEDIT, Nullable<bool> aLLOWPURING)
        {
            var aPPNAMEParameter = aPPNAME != null ?
                new ObjectParameter("APPNAME", aPPNAME) :
                new ObjectParameter("APPNAME", typeof(string));
    
            var aPPDESParameter = aPPDES != null ?
                new ObjectParameter("APPDES", aPPDES) :
                new ObjectParameter("APPDES", typeof(string));
    
            var aBBREVIATParameter = aBBREVIAT != null ?
                new ObjectParameter("ABBREVIAT", aBBREVIAT) :
                new ObjectParameter("ABBREVIAT", typeof(string));
    
            var aPPREPIDParameter = aPPREPID.HasValue ?
                new ObjectParameter("APPREPID", aPPREPID) :
                new ObjectParameter("APPREPID", typeof(int));
    
            var aPPEDITParameter = aPPEDIT.HasValue ?
                new ObjectParameter("APPEDIT", aPPEDIT) :
                new ObjectParameter("APPEDIT", typeof(bool));
    
            var aLLOWPURINGParameter = aLLOWPURING.HasValue ?
                new ObjectParameter("ALLOWPURING", aLLOWPURING) :
                new ObjectParameter("ALLOWPURING", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_saveGenerisApp", aPPNAMEParameter, aPPDESParameter, aBBREVIATParameter, aPPREPIDParameter, aPPEDITParameter, aLLOWPURINGParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_saveGenerisAppConfig(string aPPNAME, Nullable<int> gENERICAPPID, Nullable<bool> iSDEFAULT, Nullable<bool> aPPEDIT, Nullable<int> tCSID)
        {
            var aPPNAMEParameter = aPPNAME != null ?
                new ObjectParameter("APPNAME", aPPNAME) :
                new ObjectParameter("APPNAME", typeof(string));
    
            var gENERICAPPIDParameter = gENERICAPPID.HasValue ?
                new ObjectParameter("GENERICAPPID", gENERICAPPID) :
                new ObjectParameter("GENERICAPPID", typeof(int));
    
            var iSDEFAULTParameter = iSDEFAULT.HasValue ?
                new ObjectParameter("ISDEFAULT", iSDEFAULT) :
                new ObjectParameter("ISDEFAULT", typeof(bool));
    
            var aPPEDITParameter = aPPEDIT.HasValue ?
                new ObjectParameter("APPEDIT", aPPEDIT) :
                new ObjectParameter("APPEDIT", typeof(bool));
    
            var tCSIDParameter = tCSID.HasValue ?
                new ObjectParameter("TCSID", tCSID) :
                new ObjectParameter("TCSID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_saveGenerisAppConfig", aPPNAMEParameter, gENERICAPPIDParameter, iSDEFAULTParameter, aPPEDITParameter, tCSIDParameter);
        }
    
        public virtual ObjectResult<string> SP_EX_savePatientDetails(string firstName, string lastName)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_EX_savePatientDetails", firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_EX_saveStructure(string nAME, string dESC, string aBBREVIAT, Nullable<int> cATEGORY)
        {
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var dESCParameter = dESC != null ?
                new ObjectParameter("DESC", dESC) :
                new ObjectParameter("DESC", typeof(string));
    
            var aBBREVIATParameter = aBBREVIAT != null ?
                new ObjectParameter("ABBREVIAT", aBBREVIAT) :
                new ObjectParameter("ABBREVIAT", typeof(string));
    
            var cATEGORYParameter = cATEGORY.HasValue ?
                new ObjectParameter("CATEGORY", cATEGORY) :
                new ObjectParameter("CATEGORY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_EX_saveStructure", nAMEParameter, dESCParameter, aBBREVIATParameter, cATEGORYParameter);
        }
    
        public virtual int SP_EX_saveTargetClassification(string targetClassificationSetName, string name, string description, string abbreviation, Nullable<int> sortSequence, Nullable<bool> showInMenu, Nullable<bool> includeInCount, string rule, Nullable<int> ruleSequence, Nullable<bool> isDefault)
        {
            var targetClassificationSetNameParameter = targetClassificationSetName != null ?
                new ObjectParameter("TargetClassificationSetName", targetClassificationSetName) :
                new ObjectParameter("TargetClassificationSetName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var sortSequenceParameter = sortSequence.HasValue ?
                new ObjectParameter("SortSequence", sortSequence) :
                new ObjectParameter("SortSequence", typeof(int));
    
            var showInMenuParameter = showInMenu.HasValue ?
                new ObjectParameter("ShowInMenu", showInMenu) :
                new ObjectParameter("ShowInMenu", typeof(bool));
    
            var includeInCountParameter = includeInCount.HasValue ?
                new ObjectParameter("IncludeInCount", includeInCount) :
                new ObjectParameter("IncludeInCount", typeof(bool));
    
            var ruleParameter = rule != null ?
                new ObjectParameter("Rule", rule) :
                new ObjectParameter("Rule", typeof(string));
    
            var ruleSequenceParameter = ruleSequence.HasValue ?
                new ObjectParameter("RuleSequence", ruleSequence) :
                new ObjectParameter("RuleSequence", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EX_saveTargetClassification", targetClassificationSetNameParameter, nameParameter, descriptionParameter, abbreviationParameter, sortSequenceParameter, showInMenuParameter, includeInCountParameter, ruleParameter, ruleSequenceParameter, isDefaultParameter);
        }
    
        public virtual ObjectResult<SP_GetAllIkoGroup_Result> SP_GetAllIkoGroup(string loginID)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllIkoGroup_Result>("SP_GetAllIkoGroup", loginIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GetAllUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetAllUserRoles");
        }
    
        public virtual ObjectResult<string> SP_GetAllUserRolesDesc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetAllUserRolesDesc");
        }
    
        public virtual ObjectResult<string> SP_GetAllUsers(Nullable<int> disabled)
        {
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetAllUsers", disabledParameter);
        }
    
        public virtual ObjectResult<SP_GetExplorerLogs_Result> SP_GetExplorerLogs(string loginID, string hostName, string userName, string applicationName, string applicationVersion, string type, string activity, string loginFrom, string loginTo, string loginSuccessful)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var applicationVersionParameter = applicationVersion != null ?
                new ObjectParameter("ApplicationVersion", applicationVersion) :
                new ObjectParameter("ApplicationVersion", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var loginFromParameter = loginFrom != null ?
                new ObjectParameter("LoginFrom", loginFrom) :
                new ObjectParameter("LoginFrom", typeof(string));
    
            var loginToParameter = loginTo != null ?
                new ObjectParameter("LoginTo", loginTo) :
                new ObjectParameter("LoginTo", typeof(string));
    
            var loginSuccessfulParameter = loginSuccessful != null ?
                new ObjectParameter("LoginSuccessful", loginSuccessful) :
                new ObjectParameter("LoginSuccessful", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetExplorerLogs_Result>("SP_GetExplorerLogs", loginIDParameter, hostNameParameter, userNameParameter, applicationNameParameter, applicationVersionParameter, typeParameter, activityParameter, loginFromParameter, loginToParameter, loginSuccessfulParameter);
        }
    
        public virtual ObjectResult<string> SP_GetGroupUsers(Nullable<int> id, Nullable<int> disabled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetGroupUsers", idParameter, disabledParameter);
        }
    
        public virtual ObjectResult<SP_GetIkoGroup_Result> SP_GetIkoGroup(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetIkoGroup_Result>("SP_GetIkoGroup", nameParameter);
        }
    
        public virtual ObjectResult<SP_GetIkoUser_Result> SP_GetIkoUser(string loginID, string currentUser)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetIkoUser_Result>("SP_GetIkoUser", loginIDParameter, currentUserParameter);
        }
    
        public virtual ObjectResult<string> SP_GetImageLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetImageLocation");
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetImageSrvNewSlideThresholdInGB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetImageSrvNewSlideThresholdInGB");
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetImageSrvWarnThresholdInGB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetImageSrvWarnThresholdInGB");
        }
    
        public virtual int sp_GetLicense(Nullable<int> version)
        {
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetLicense", versionParameter);
        }
    
        public virtual ObjectResult<SP_GetLogs_Result> SP_GetLogs(string loginID, string hostName, string userName, string applicationName, string applicationVersion, string loginFrom, string loginTo, string loginSuccessful)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var applicationVersionParameter = applicationVersion != null ?
                new ObjectParameter("ApplicationVersion", applicationVersion) :
                new ObjectParameter("ApplicationVersion", typeof(string));
    
            var loginFromParameter = loginFrom != null ?
                new ObjectParameter("LoginFrom", loginFrom) :
                new ObjectParameter("LoginFrom", typeof(string));
    
            var loginToParameter = loginTo != null ?
                new ObjectParameter("LoginTo", loginTo) :
                new ObjectParameter("LoginTo", typeof(string));
    
            var loginSuccessfulParameter = loginSuccessful != null ?
                new ObjectParameter("LoginSuccessful", loginSuccessful) :
                new ObjectParameter("LoginSuccessful", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLogs_Result>("SP_GetLogs", loginIDParameter, hostNameParameter, userNameParameter, applicationNameParameter, applicationVersionParameter, loginFromParameter, loginToParameter, loginSuccessfulParameter);
        }
    
        public virtual ObjectResult<string> SP_GetRestOfGroupUsers(Nullable<int> id, Nullable<int> disabled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var disabledParameter = disabled.HasValue ?
                new ObjectParameter("Disabled", disabled) :
                new ObjectParameter("Disabled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetRestOfGroupUsers", idParameter, disabledParameter);
        }
    
        public virtual ObjectResult<SP_GetSlide_Result> SP_GetSlide(string loginID, string barCode, Nullable<int> cassetteId, Nullable<int> ikoGroupID, Nullable<int> createdBy, string fromdate, string todate, string patientBarcode, string firstName, string lastName, string accession, string caseNumber)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var cassetteIdParameter = cassetteId.HasValue ?
                new ObjectParameter("CassetteId", cassetteId) :
                new ObjectParameter("CassetteId", typeof(int));
    
            var ikoGroupIDParameter = ikoGroupID.HasValue ?
                new ObjectParameter("IkoGroupID", ikoGroupID) :
                new ObjectParameter("IkoGroupID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var patientBarcodeParameter = patientBarcode != null ?
                new ObjectParameter("PatientBarcode", patientBarcode) :
                new ObjectParameter("PatientBarcode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var accessionParameter = accession != null ?
                new ObjectParameter("Accession", accession) :
                new ObjectParameter("Accession", typeof(string));
    
            var caseNumberParameter = caseNumber != null ?
                new ObjectParameter("CaseNumber", caseNumber) :
                new ObjectParameter("CaseNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSlide_Result>("SP_GetSlide", loginIDParameter, barCodeParameter, cassetteIdParameter, ikoGroupIDParameter, createdByParameter, fromdateParameter, todateParameter, patientBarcodeParameter, firstNameParameter, lastNameParameter, accessionParameter, caseNumberParameter);
        }
    
        public virtual ObjectResult<string> SP_GetUserGroups(string loginID)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetUserGroups", loginIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GetUserRoles(string loginID)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetUserRoles", loginIDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_InsertIkoExpLogs(string name, string identity)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var identityParameter = identity != null ?
                new ObjectParameter("Identity", identity) :
                new ObjectParameter("Identity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertIkoExpLogs", nameParameter, identityParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_InsertIkoLogs(string loginID, string hostName, string userName, string applicationName, string applicationVersion, Nullable<bool> loginSuccessful)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var applicationVersionParameter = applicationVersion != null ?
                new ObjectParameter("ApplicationVersion", applicationVersion) :
                new ObjectParameter("ApplicationVersion", typeof(string));
    
            var loginSuccessfulParameter = loginSuccessful.HasValue ?
                new ObjectParameter("LoginSuccessful", loginSuccessful) :
                new ObjectParameter("LoginSuccessful", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_InsertIkoLogs", loginIDParameter, hostNameParameter, userNameParameter, applicationNameParameter, applicationVersionParameter, loginSuccessfulParameter);
        }
    
        public virtual int SP_InsertLogout(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertLogout", iDParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateCassette(string barcode, string scannerName, Nullable<System.DateTime> scannerNameChangeTime)
        {
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var scannerNameParameter = scannerName != null ?
                new ObjectParameter("ScannerName", scannerName) :
                new ObjectParameter("ScannerName", typeof(string));
    
            var scannerNameChangeTimeParameter = scannerNameChangeTime.HasValue ?
                new ObjectParameter("ScannerNameChangeTime", scannerNameChangeTime) :
                new ObjectParameter("ScannerNameChangeTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCassette", barcodeParameter, scannerNameParameter, scannerNameChangeTimeParameter);
        }
    
        public virtual int UpdateGenericAppConfigForManual(string generciAppConfigName, string manualGenerciAppConfigName)
        {
            var generciAppConfigNameParameter = generciAppConfigName != null ?
                new ObjectParameter("GenerciAppConfigName", generciAppConfigName) :
                new ObjectParameter("GenerciAppConfigName", typeof(string));
    
            var manualGenerciAppConfigNameParameter = manualGenerciAppConfigName != null ?
                new ObjectParameter("ManualGenerciAppConfigName", manualGenerciAppConfigName) :
                new ObjectParameter("ManualGenerciAppConfigName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGenericAppConfigForManual", generciAppConfigNameParameter, manualGenerciAppConfigNameParameter);
        }
    
        public virtual int UpdateSlide(string slideBarcode, string slideStatusName, Nullable<System.DateTime> slideStatusChangeTime)
        {
            var slideBarcodeParameter = slideBarcode != null ?
                new ObjectParameter("SlideBarcode", slideBarcode) :
                new ObjectParameter("SlideBarcode", typeof(string));
    
            var slideStatusNameParameter = slideStatusName != null ?
                new ObjectParameter("SlideStatusName", slideStatusName) :
                new ObjectParameter("SlideStatusName", typeof(string));
    
            var slideStatusChangeTimeParameter = slideStatusChangeTime.HasValue ?
                new ObjectParameter("SlideStatusChangeTime", slideStatusChangeTime) :
                new ObjectParameter("SlideStatusChangeTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSlide", slideBarcodeParameter, slideStatusNameParameter, slideStatusChangeTimeParameter);
        }
    }
}
